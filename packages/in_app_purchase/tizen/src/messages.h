// Autogenerated from Pigeon (v22.7.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_MESSAGES_H_
#define PIGEON_MESSAGES_H_
#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

// Generated class from Pigeon.

class FlutterError {
 public:
  explicit FlutterError(const std::string& code) : code_(code) {}
  explicit FlutterError(const std::string& code, const std::string& message)
      : code_(code), message_(message) {}
  explicit FlutterError(const std::string& code, const std::string& message,
                        const flutter::EncodableValue& details)
      : code_(code), message_(message), details_(details) {}

  const std::string& code() const { return code_; }
  const std::string& message() const { return message_; }
  const flutter::EncodableValue& details() const { return details_; }

 private:
  std::string code_;
  std::string message_;
  flutter::EncodableValue details_;
};

template <class T>
class ErrorOr {
 public:
  ErrorOr(const T& rhs) : v_(rhs) {}
  ErrorOr(const T&& rhs) : v_(std::move(rhs)) {}
  ErrorOr(const FlutterError& rhs) : v_(rhs) {}
  ErrorOr(const FlutterError&& rhs) : v_(std::move(rhs)) {}

  bool has_error() const { return std::holds_alternative<FlutterError>(v_); }
  const T& value() const { return std::get<T>(v_); };
  const FlutterError& error() const { return std::get<FlutterError>(v_); };

 private:
  friend class InAppPurchaseApi;
  ErrorOr() = default;
  T TakeValue() && { return std::get<T>(std::move(v_)); }

  std::variant<T, FlutterError> v_;
};

// Dart wrapper around [`ProductsListApiResult`] in
// (https://developer.samsung.com/smarttv/develop/api-references/samsung-product-api-references/billing-api.html).
//
// Defines a dictionary for product list data returned by the getProductsList
// API. This only can be used in [BillingManager.requestProducts].
//
// Generated class from Pigeon that represents data sent in messages.
class ProductsListApiResult {
 public:
  // Constructs an object setting all non-nullable fields.
  explicit ProductsListApiResult(const std::string& cp_status,
                                 int64_t total_count,
                                 const std::string& check_value,
                                 const flutter::EncodableList& item_details);

  // Constructs an object setting all fields.
  explicit ProductsListApiResult(const std::string& cp_status,
                                 const std::string* cp_result,
                                 int64_t total_count,
                                 const std::string& check_value,
                                 const flutter::EncodableList& item_details);

  // DPI result code.
  // Returns "100000" on success and other codes on failure.
  const std::string& cp_status() const;
  void set_cp_status(std::string_view value_arg);

  // The result message.
  // "EOF":Last page of the product list.
  // "hasNext:TRUE" Product list has further pages.
  // Other error message, depending on the DPI result code.
  const std::string* cp_result() const;
  void set_cp_result(const std::string_view* value_arg);
  void set_cp_result(std::string_view value_arg);

  // Total number of invoices.
  int64_t total_count() const;
  void set_total_count(int64_t value_arg);

  // Security check value.
  const std::string& check_value() const;
  void set_check_value(std::string_view value_arg);

  // ItemDetails in JSON format
  const flutter::EncodableList& item_details() const;
  void set_item_details(const flutter::EncodableList& value_arg);

 private:
  static ProductsListApiResult FromEncodableList(
      const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class InAppPurchaseApi;
  friend class PigeonInternalCodecSerializer;
  std::string cp_status_;
  std::optional<std::string> cp_result_;
  int64_t total_count_;
  std::string check_value_;
  flutter::EncodableList item_details_;
};

// Dart wrapper around [`GetUserPurchaseListAPIResult`] in
// (https://developer.samsung.com/smarttv/develop/api-references/samsung-product-api-references/billing-api.html).
//
// Defines a dictionary for data returned by the getUserPurchaseList API.
// This only can be used in [BillingManager.requestPurchases]
//
// Generated class from Pigeon that represents data sent in messages.
class GetUserPurchaseListAPIResult {
 public:
  // Constructs an object setting all non-nullable fields.
  explicit GetUserPurchaseListAPIResult(
      const std::string& cp_status, int64_t total_count,
      const std::string& check_value,
      const flutter::EncodableList& invoice_details);

  // Constructs an object setting all fields.
  explicit GetUserPurchaseListAPIResult(
      const std::string& cp_status, const std::string* cp_result,
      int64_t total_count, const std::string& check_value,
      const flutter::EncodableList& invoice_details);

  // It returns "100000" in success and other codes in failure. Refer to DPI
  // Error Code.
  const std::string& cp_status() const;
  void set_cp_status(std::string_view value_arg);

  // The result message:
  // "EOF":Last page of the product list
  // "hasNext:TRUE" Product list has further pages
  // Other error message, depending on the DPI result code
  const std::string* cp_result() const;
  void set_cp_result(const std::string_view* value_arg);
  void set_cp_result(std::string_view value_arg);

  // Total number of invoices.
  int64_t total_count() const;
  void set_total_count(int64_t value_arg);

  // Security check value.
  const std::string& check_value() const;
  void set_check_value(std::string_view value_arg);

  // InvoiceDetailsin JSON format.
  const flutter::EncodableList& invoice_details() const;
  void set_invoice_details(const flutter::EncodableList& value_arg);

 private:
  static GetUserPurchaseListAPIResult FromEncodableList(
      const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class InAppPurchaseApi;
  friend class PigeonInternalCodecSerializer;
  std::string cp_status_;
  std::optional<std::string> cp_result_;
  int64_t total_count_;
  std::string check_value_;
  flutter::EncodableList invoice_details_;
};

// Dart wrapper around
// [`BillingBuyData`](https://developer.samsung.com/smarttv/develop/api-references/samsung-product-api-references/billing-api.html#BillingBuyData).
//
// Defines the payment result and information.
//
// Generated class from Pigeon that represents data sent in messages.
class BillingBuyData {
 public:
  // Constructs an object setting all fields.
  explicit BillingBuyData(const std::string& pay_result,
                          const flutter::EncodableMap& pay_details);

  // The payment result
  const std::string& pay_result() const;
  void set_pay_result(std::string_view value_arg);

  // The payment information. It is same with paymentDetails param of buyItem.
  const flutter::EncodableMap& pay_details() const;
  void set_pay_details(const flutter::EncodableMap& value_arg);

 private:
  static BillingBuyData FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class InAppPurchaseApi;
  friend class PigeonInternalCodecSerializer;
  std::string pay_result_;
  flutter::EncodableMap pay_details_;
};

// Dart wrapper around [`VerifyInvoiceAPIResult`] in
// (https://developer.samsung.com/smarttv/develop/api-references/samsung-product-api-references/billing-api.html).
//
// This only can be used in [BillingManager.verifyInvoice].
//
// Generated class from Pigeon that represents data sent in messages.
class VerifyInvoiceAPIResult {
 public:
  // Constructs an object setting all non-nullable fields.
  explicit VerifyInvoiceAPIResult(const std::string& cp_status,
                                  const std::string& app_id,
                                  const std::string& invoice_id);

  // Constructs an object setting all fields.
  explicit VerifyInvoiceAPIResult(const std::string& cp_status,
                                  const std::string* cp_result,
                                  const std::string& app_id,
                                  const std::string& invoice_id);

  // DPI result code. Returns "100000" on success and other codes on failure.
  const std::string& cp_status() const;
  void set_cp_status(std::string_view value_arg);

  // The result message:
  // "SUCCESS" and Other error message, depending on the DPI result code.
  const std::string* cp_result() const;
  void set_cp_result(const std::string_view* value_arg);
  void set_cp_result(std::string_view value_arg);

  // The application ID.
  const std::string& app_id() const;
  void set_app_id(std::string_view value_arg);

  // Invoice ID that you want to verify whether a purchase was successful.
  const std::string& invoice_id() const;
  void set_invoice_id(std::string_view value_arg);

 private:
  static VerifyInvoiceAPIResult FromEncodableList(
      const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class InAppPurchaseApi;
  friend class PigeonInternalCodecSerializer;
  std::string cp_status_;
  std::optional<std::string> cp_result_;
  std::string app_id_;
  std::string invoice_id_;
};

// Dart wrapper around [`ServiceAvailableAPIResult`] in
// (https://developer.samsung.com/smarttv/develop/api-references/samsung-product-api-references/billing-api.html).
//
// Defines a dictionary for data returned by the IsServiceAvailable API.
// This only can be used in [BillingManager.isAvailable].
//
// Generated class from Pigeon that represents data sent in messages.
class ServiceAvailableAPIResult {
 public:
  // Constructs an object setting all fields.
  explicit ServiceAvailableAPIResult(const std::string& status,
                                     const std::string& result,
                                     const std::string& service_yn);

  // The result code of connecting to billing server.
  // Returns "100000" on success and other codes on failure.
  const std::string& status() const;
  void set_status(std::string_view value_arg);

  // The result message of connecting to billing server.
  // Returns "Success" on success.
  const std::string& result() const;
  void set_result(std::string_view value_arg);

  // Returns "Y" if the service is available.
  // It will be null, if disconnect to billing server.
  const std::string& service_yn() const;
  void set_service_yn(std::string_view value_arg);

 private:
  static ServiceAvailableAPIResult FromEncodableList(
      const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class InAppPurchaseApi;
  friend class PigeonInternalCodecSerializer;
  std::string status_;
  std::string result_;
  std::string service_yn_;
};

// Generated class from Pigeon that represents data sent in messages.
class ProductMessage {
 public:
  // Constructs an object setting all fields.
  explicit ProductMessage(const std::string& app_id,
                          const std::string& country_code, int64_t page_size,
                          int64_t page_num, const std::string& check_value);

  // Application ID.
  const std::string& app_id() const;
  void set_app_id(std::string_view value_arg);

  // TV country code.
  const std::string& country_code() const;
  void set_country_code(std::string_view value_arg);

  // Number of products retrieved per page (maximum 100).
  int64_t page_size() const;
  void set_page_size(int64_t value_arg);

  // Requested page number (1 ~ N).
  int64_t page_num() const;
  void set_page_num(int64_t value_arg);

  // Security check value. Required parameters = "appId" + "countryCode".
  // The check value is used by the DPI service to verify API requests.
  // It is a Base64 hash generated by applying the HMAC SHA256 algorithm on a
  // concatenated string of parameters using the DPI security key.
  const std::string& check_value() const;
  void set_check_value(std::string_view value_arg);

 private:
  static ProductMessage FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class InAppPurchaseApi;
  friend class PigeonInternalCodecSerializer;
  std::string app_id_;
  std::string country_code_;
  int64_t page_size_;
  int64_t page_num_;
  std::string check_value_;
};

// Generated class from Pigeon that represents data sent in messages.
class PurchaseMessage {
 public:
  // Constructs an object setting all fields.
  explicit PurchaseMessage(const std::string& app_id,
                           const std::string& custom_id,
                           const std::string& country_code, int64_t page_num,
                           const std::string& check_value);

  // Application ID.
  const std::string& app_id() const;
  void set_app_id(std::string_view value_arg);

  // Same value as "OrderCustomID" parameter for the BuyItem API (Samsung
  // Account UID)
  const std::string& custom_id() const;
  void set_custom_id(std::string_view value_arg);

  // TV country code.
  const std::string& country_code() const;
  void set_country_code(std::string_view value_arg);

  // Requested page number (1 ~ N).
  int64_t page_num() const;
  void set_page_num(int64_t value_arg);

  // Security check value. Required parameters = "appId" + "customId" +
  // "countryCode" + "ItemType" + "pageNumber". ItemType, MUST use 2 as value
  // ("all items")
  const std::string& check_value() const;
  void set_check_value(std::string_view value_arg);

 private:
  static PurchaseMessage FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class InAppPurchaseApi;
  friend class PigeonInternalCodecSerializer;
  std::string app_id_;
  std::string custom_id_;
  std::string country_code_;
  int64_t page_num_;
  std::string check_value_;
};

// Generated class from Pigeon that represents data sent in messages.
class OrderDetails {
 public:
  // Constructs an object setting all fields.
  explicit OrderDetails(const std::string& order_item_id,
                        const std::string& order_title,
                        const std::string& order_total,
                        const std::string& order_currency_id,
                        const std::string& order_custom_id);

  const std::string& order_item_id() const;
  void set_order_item_id(std::string_view value_arg);

  const std::string& order_title() const;
  void set_order_title(std::string_view value_arg);

  const std::string& order_total() const;
  void set_order_total(std::string_view value_arg);

  const std::string& order_currency_id() const;
  void set_order_currency_id(std::string_view value_arg);

  const std::string& order_custom_id() const;
  void set_order_custom_id(std::string_view value_arg);

 private:
  static OrderDetails FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class BuyInfoMessage;
  friend class InAppPurchaseApi;
  friend class PigeonInternalCodecSerializer;
  std::string order_item_id_;
  std::string order_title_;
  std::string order_total_;
  std::string order_currency_id_;
  std::string order_custom_id_;
};

// Generated class from Pigeon that represents data sent in messages.
class BuyInfoMessage {
 public:
  // Constructs an object setting all fields.
  explicit BuyInfoMessage(const std::string& app_id,
                          const OrderDetails& pay_detials);

  ~BuyInfoMessage() = default;
  BuyInfoMessage(const BuyInfoMessage& other);
  BuyInfoMessage& operator=(const BuyInfoMessage& other);
  BuyInfoMessage(BuyInfoMessage&& other) = default;
  BuyInfoMessage& operator=(BuyInfoMessage&& other) noexcept = default;
  // Application ID.
  const std::string& app_id() const;
  void set_app_id(std::string_view value_arg);

  // Payment parameters.
  const OrderDetails& pay_detials() const;
  void set_pay_detials(const OrderDetails& value_arg);

 private:
  static BuyInfoMessage FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class InAppPurchaseApi;
  friend class PigeonInternalCodecSerializer;
  std::string app_id_;
  std::unique_ptr<OrderDetails> pay_detials_;
};

// Generated class from Pigeon that represents data sent in messages.
class InvoiceMessage {
 public:
  // Constructs an object setting all fields.
  explicit InvoiceMessage(const std::string& app_id,
                          const std::string& custom_id,
                          const std::string& invoice_id,
                          const std::string& country_code);

  // Application ID.
  const std::string& app_id() const;
  void set_app_id(std::string_view value_arg);

  // Same value as "OrderCustomID" parameter for the BuyItem API (Samsung
  // Account UID).
  const std::string& custom_id() const;
  void set_custom_id(std::string_view value_arg);

  // Invoice ID that you want to verify whether a purchase was successful.
  const std::string& invoice_id() const;
  void set_invoice_id(std::string_view value_arg);

  //  TV country code.
  const std::string& country_code() const;
  void set_country_code(std::string_view value_arg);

 private:
  static InvoiceMessage FromEncodableList(const flutter::EncodableList& list);
  flutter::EncodableList ToEncodableList() const;
  friend class InAppPurchaseApi;
  friend class PigeonInternalCodecSerializer;
  std::string app_id_;
  std::string custom_id_;
  std::string invoice_id_;
  std::string country_code_;
};

class PigeonInternalCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  PigeonInternalCodecSerializer();
  inline static PigeonInternalCodecSerializer& GetInstance() {
    static PigeonInternalCodecSerializer sInstance;
    return sInstance;
  }

  void WriteValue(const flutter::EncodableValue& value,
                  flutter::ByteStreamWriter* stream) const override;

 protected:
  flutter::EncodableValue ReadValueOfType(
      uint8_t type, flutter::ByteStreamReader* stream) const override;
};

// Generated interface from Pigeon that represents a handler of messages from
// Flutter.
class InAppPurchaseApi {
 public:
  InAppPurchaseApi(const InAppPurchaseApi&) = delete;
  InAppPurchaseApi& operator=(const InAppPurchaseApi&) = delete;
  virtual ~InAppPurchaseApi() {}
  // Retrieves the list of products registered on the Billing (DPI) server.
  virtual void GetProductsList(
      const ProductMessage& product,
      std::function<void(ErrorOr<ProductsListApiResult> reply)> result) = 0;
  // Retrieves the user's purchase list.
  virtual void GetUserPurchaseList(
      const PurchaseMessage& purchase,
      std::function<void(ErrorOr<GetUserPurchaseListAPIResult> reply)>
          result) = 0;
  // Enables implementing the Samsung Checkout Client module within the
  // application. After authenticating the purchase information through the
  // application, the user can proceed to purchase payment.
  virtual void BuyItem(
      const BuyInfoMessage& buy_info,
      std::function<void(ErrorOr<BillingBuyData> reply)> result) = 0;
  // Checks whether a purchase, corresponding to a specific "InvoiceID", was
  // successful.
  virtual void VerifyInvoice(
      const InvoiceMessage& invoice,
      std::function<void(ErrorOr<VerifyInvoiceAPIResult> reply)> result) = 0;
  // Checks whether the Billing server is available.
  virtual void IsServiceAvailable(
      std::function<void(ErrorOr<bool> reply)> result) = 0;
  virtual ErrorOr<std::string> GetCustomId() = 0;
  virtual ErrorOr<std::string> GetCountryCode() = 0;

  // The codec used by InAppPurchaseApi.
  static const flutter::StandardMessageCodec& GetCodec();
  // Sets up an instance of `InAppPurchaseApi` to handle messages through the
  // `binary_messenger`.
  static void SetUp(flutter::BinaryMessenger* binary_messenger,
                    InAppPurchaseApi* api);
  static void SetUp(flutter::BinaryMessenger* binary_messenger,
                    InAppPurchaseApi* api,
                    const std::string& message_channel_suffix);
  static flutter::EncodableValue WrapError(std::string_view error_message);
  static flutter::EncodableValue WrapError(const FlutterError& error);

 protected:
  InAppPurchaseApi() = default;
};
#endif  // PIGEON_MESSAGES_H_
