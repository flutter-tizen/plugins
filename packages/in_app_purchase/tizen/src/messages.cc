// Autogenerated from Pigeon (v22.7.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "messages.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

FlutterError CreateConnectionError(const std::string channel_name) {
  return FlutterError(
      "channel-error",
      "Unable to establish connection on channel: '" + channel_name + "'.",
      EncodableValue(""));
}

// ProductsListApiResult

ProductsListApiResult::ProductsListApiResult(const std::string& cp_status,
                                             int64_t total_count,
                                             const std::string& check_value,
                                             const EncodableList& item_details)
    : cp_status_(cp_status),
      total_count_(total_count),
      check_value_(check_value),
      item_details_(item_details) {}

ProductsListApiResult::ProductsListApiResult(const std::string& cp_status,
                                             const std::string* cp_result,
                                             int64_t total_count,
                                             const std::string& check_value,
                                             const EncodableList& item_details)
    : cp_status_(cp_status),
      cp_result_(cp_result ? std::optional<std::string>(*cp_result)
                           : std::nullopt),
      total_count_(total_count),
      check_value_(check_value),
      item_details_(item_details) {}

const std::string& ProductsListApiResult::cp_status() const {
  return cp_status_;
}

void ProductsListApiResult::set_cp_status(std::string_view value_arg) {
  cp_status_ = value_arg;
}

const std::string* ProductsListApiResult::cp_result() const {
  return cp_result_ ? &(*cp_result_) : nullptr;
}

void ProductsListApiResult::set_cp_result(const std::string_view* value_arg) {
  cp_result_ =
      value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void ProductsListApiResult::set_cp_result(std::string_view value_arg) {
  cp_result_ = value_arg;
}

int64_t ProductsListApiResult::total_count() const { return total_count_; }

void ProductsListApiResult::set_total_count(int64_t value_arg) {
  total_count_ = value_arg;
}

const std::string& ProductsListApiResult::check_value() const {
  return check_value_;
}

void ProductsListApiResult::set_check_value(std::string_view value_arg) {
  check_value_ = value_arg;
}

const EncodableList& ProductsListApiResult::item_details() const {
  return item_details_;
}

void ProductsListApiResult::set_item_details(const EncodableList& value_arg) {
  item_details_ = value_arg;
}

EncodableList ProductsListApiResult::ToEncodableList() const {
  EncodableList list;
  list.reserve(5);
  list.push_back(EncodableValue(cp_status_));
  list.push_back(cp_result_ ? EncodableValue(*cp_result_) : EncodableValue());
  list.push_back(EncodableValue(total_count_));
  list.push_back(EncodableValue(check_value_));
  list.push_back(EncodableValue(item_details_));
  return list;
}

ProductsListApiResult ProductsListApiResult::FromEncodableList(
    const EncodableList& list) {
  ProductsListApiResult decoded(
      std::get<std::string>(list[0]), std::get<int64_t>(list[2]),
      std::get<std::string>(list[3]), std::get<EncodableList>(list[4]));
  auto& encodable_cp_result = list[1];
  if (!encodable_cp_result.IsNull()) {
    decoded.set_cp_result(std::get<std::string>(encodable_cp_result));
  }
  return decoded;
}

// GetUserPurchaseListAPIResult

GetUserPurchaseListAPIResult::GetUserPurchaseListAPIResult(
    const std::string& cp_status, int64_t total_count,
    const std::string& check_value, const EncodableList& invoice_details)
    : cp_status_(cp_status),
      total_count_(total_count),
      check_value_(check_value),
      invoice_details_(invoice_details) {}

GetUserPurchaseListAPIResult::GetUserPurchaseListAPIResult(
    const std::string& cp_status, const std::string* cp_result,
    int64_t total_count, const std::string& check_value,
    const EncodableList& invoice_details)
    : cp_status_(cp_status),
      cp_result_(cp_result ? std::optional<std::string>(*cp_result)
                           : std::nullopt),
      total_count_(total_count),
      check_value_(check_value),
      invoice_details_(invoice_details) {}

const std::string& GetUserPurchaseListAPIResult::cp_status() const {
  return cp_status_;
}

void GetUserPurchaseListAPIResult::set_cp_status(std::string_view value_arg) {
  cp_status_ = value_arg;
}

const std::string* GetUserPurchaseListAPIResult::cp_result() const {
  return cp_result_ ? &(*cp_result_) : nullptr;
}

void GetUserPurchaseListAPIResult::set_cp_result(
    const std::string_view* value_arg) {
  cp_result_ =
      value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void GetUserPurchaseListAPIResult::set_cp_result(std::string_view value_arg) {
  cp_result_ = value_arg;
}

int64_t GetUserPurchaseListAPIResult::total_count() const {
  return total_count_;
}

void GetUserPurchaseListAPIResult::set_total_count(int64_t value_arg) {
  total_count_ = value_arg;
}

const std::string& GetUserPurchaseListAPIResult::check_value() const {
  return check_value_;
}

void GetUserPurchaseListAPIResult::set_check_value(std::string_view value_arg) {
  check_value_ = value_arg;
}

const EncodableList& GetUserPurchaseListAPIResult::invoice_details() const {
  return invoice_details_;
}

void GetUserPurchaseListAPIResult::set_invoice_details(
    const EncodableList& value_arg) {
  invoice_details_ = value_arg;
}

EncodableList GetUserPurchaseListAPIResult::ToEncodableList() const {
  EncodableList list;
  list.reserve(5);
  list.push_back(EncodableValue(cp_status_));
  list.push_back(cp_result_ ? EncodableValue(*cp_result_) : EncodableValue());
  list.push_back(EncodableValue(total_count_));
  list.push_back(EncodableValue(check_value_));
  list.push_back(EncodableValue(invoice_details_));
  return list;
}

GetUserPurchaseListAPIResult GetUserPurchaseListAPIResult::FromEncodableList(
    const EncodableList& list) {
  GetUserPurchaseListAPIResult decoded(
      std::get<std::string>(list[0]), std::get<int64_t>(list[2]),
      std::get<std::string>(list[3]), std::get<EncodableList>(list[4]));
  auto& encodable_cp_result = list[1];
  if (!encodable_cp_result.IsNull()) {
    decoded.set_cp_result(std::get<std::string>(encodable_cp_result));
  }
  return decoded;
}

// BillingBuyData

BillingBuyData::BillingBuyData(const std::string& pay_result,
                               const EncodableMap& pay_details)
    : pay_result_(pay_result), pay_details_(pay_details) {}

const std::string& BillingBuyData::pay_result() const { return pay_result_; }

void BillingBuyData::set_pay_result(std::string_view value_arg) {
  pay_result_ = value_arg;
}

const EncodableMap& BillingBuyData::pay_details() const { return pay_details_; }

void BillingBuyData::set_pay_details(const EncodableMap& value_arg) {
  pay_details_ = value_arg;
}

EncodableList BillingBuyData::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(pay_result_));
  list.push_back(EncodableValue(pay_details_));
  return list;
}

BillingBuyData BillingBuyData::FromEncodableList(const EncodableList& list) {
  BillingBuyData decoded(std::get<std::string>(list[0]),
                         std::get<EncodableMap>(list[1]));
  return decoded;
}

// VerifyInvoiceAPIResult

VerifyInvoiceAPIResult::VerifyInvoiceAPIResult(const std::string& cp_status,
                                               const std::string& app_id,
                                               const std::string& invoice_id)
    : cp_status_(cp_status), app_id_(app_id), invoice_id_(invoice_id) {}

VerifyInvoiceAPIResult::VerifyInvoiceAPIResult(const std::string& cp_status,
                                               const std::string* cp_result,
                                               const std::string& app_id,
                                               const std::string& invoice_id)
    : cp_status_(cp_status),
      cp_result_(cp_result ? std::optional<std::string>(*cp_result)
                           : std::nullopt),
      app_id_(app_id),
      invoice_id_(invoice_id) {}

const std::string& VerifyInvoiceAPIResult::cp_status() const {
  return cp_status_;
}

void VerifyInvoiceAPIResult::set_cp_status(std::string_view value_arg) {
  cp_status_ = value_arg;
}

const std::string* VerifyInvoiceAPIResult::cp_result() const {
  return cp_result_ ? &(*cp_result_) : nullptr;
}

void VerifyInvoiceAPIResult::set_cp_result(const std::string_view* value_arg) {
  cp_result_ =
      value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void VerifyInvoiceAPIResult::set_cp_result(std::string_view value_arg) {
  cp_result_ = value_arg;
}

const std::string& VerifyInvoiceAPIResult::app_id() const { return app_id_; }

void VerifyInvoiceAPIResult::set_app_id(std::string_view value_arg) {
  app_id_ = value_arg;
}

const std::string& VerifyInvoiceAPIResult::invoice_id() const {
  return invoice_id_;
}

void VerifyInvoiceAPIResult::set_invoice_id(std::string_view value_arg) {
  invoice_id_ = value_arg;
}

EncodableList VerifyInvoiceAPIResult::ToEncodableList() const {
  EncodableList list;
  list.reserve(4);
  list.push_back(EncodableValue(cp_status_));
  list.push_back(cp_result_ ? EncodableValue(*cp_result_) : EncodableValue());
  list.push_back(EncodableValue(app_id_));
  list.push_back(EncodableValue(invoice_id_));
  return list;
}

VerifyInvoiceAPIResult VerifyInvoiceAPIResult::FromEncodableList(
    const EncodableList& list) {
  VerifyInvoiceAPIResult decoded(std::get<std::string>(list[0]),
                                 std::get<std::string>(list[2]),
                                 std::get<std::string>(list[3]));
  auto& encodable_cp_result = list[1];
  if (!encodable_cp_result.IsNull()) {
    decoded.set_cp_result(std::get<std::string>(encodable_cp_result));
  }
  return decoded;
}

// ServiceAvailableAPIResult

ServiceAvailableAPIResult::ServiceAvailableAPIResult(
    const std::string& status, const std::string& result,
    const std::string& service_yn)
    : status_(status), result_(result), service_yn_(service_yn) {}

const std::string& ServiceAvailableAPIResult::status() const { return status_; }

void ServiceAvailableAPIResult::set_status(std::string_view value_arg) {
  status_ = value_arg;
}

const std::string& ServiceAvailableAPIResult::result() const { return result_; }

void ServiceAvailableAPIResult::set_result(std::string_view value_arg) {
  result_ = value_arg;
}

const std::string& ServiceAvailableAPIResult::service_yn() const {
  return service_yn_;
}

void ServiceAvailableAPIResult::set_service_yn(std::string_view value_arg) {
  service_yn_ = value_arg;
}

EncodableList ServiceAvailableAPIResult::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(EncodableValue(status_));
  list.push_back(EncodableValue(result_));
  list.push_back(EncodableValue(service_yn_));
  return list;
}

ServiceAvailableAPIResult ServiceAvailableAPIResult::FromEncodableList(
    const EncodableList& list) {
  ServiceAvailableAPIResult decoded(std::get<std::string>(list[0]),
                                    std::get<std::string>(list[1]),
                                    std::get<std::string>(list[2]));
  return decoded;
}

// ProductMessage

ProductMessage::ProductMessage(const std::string& app_id,
                               const std::string& country_code,
                               int64_t page_size, int64_t page_num,
                               const std::string& check_value)
    : app_id_(app_id),
      country_code_(country_code),
      page_size_(page_size),
      page_num_(page_num),
      check_value_(check_value) {}

const std::string& ProductMessage::app_id() const { return app_id_; }

void ProductMessage::set_app_id(std::string_view value_arg) {
  app_id_ = value_arg;
}

const std::string& ProductMessage::country_code() const {
  return country_code_;
}

void ProductMessage::set_country_code(std::string_view value_arg) {
  country_code_ = value_arg;
}

int64_t ProductMessage::page_size() const { return page_size_; }

void ProductMessage::set_page_size(int64_t value_arg) {
  page_size_ = value_arg;
}

int64_t ProductMessage::page_num() const { return page_num_; }

void ProductMessage::set_page_num(int64_t value_arg) { page_num_ = value_arg; }

const std::string& ProductMessage::check_value() const { return check_value_; }

void ProductMessage::set_check_value(std::string_view value_arg) {
  check_value_ = value_arg;
}

EncodableList ProductMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(5);
  list.push_back(EncodableValue(app_id_));
  list.push_back(EncodableValue(country_code_));
  list.push_back(EncodableValue(page_size_));
  list.push_back(EncodableValue(page_num_));
  list.push_back(EncodableValue(check_value_));
  return list;
}

ProductMessage ProductMessage::FromEncodableList(const EncodableList& list) {
  ProductMessage decoded(std::get<std::string>(list[0]),
                         std::get<std::string>(list[1]),
                         std::get<int64_t>(list[2]), std::get<int64_t>(list[3]),
                         std::get<std::string>(list[4]));
  return decoded;
}

// PurchaseMessage

PurchaseMessage::PurchaseMessage(const std::string& app_id,
                                 const std::string& custom_id,
                                 const std::string& country_code,
                                 int64_t page_num,
                                 const std::string& check_value)
    : app_id_(app_id),
      custom_id_(custom_id),
      country_code_(country_code),
      page_num_(page_num),
      check_value_(check_value) {}

const std::string& PurchaseMessage::app_id() const { return app_id_; }

void PurchaseMessage::set_app_id(std::string_view value_arg) {
  app_id_ = value_arg;
}

const std::string& PurchaseMessage::custom_id() const { return custom_id_; }

void PurchaseMessage::set_custom_id(std::string_view value_arg) {
  custom_id_ = value_arg;
}

const std::string& PurchaseMessage::country_code() const {
  return country_code_;
}

void PurchaseMessage::set_country_code(std::string_view value_arg) {
  country_code_ = value_arg;
}

int64_t PurchaseMessage::page_num() const { return page_num_; }

void PurchaseMessage::set_page_num(int64_t value_arg) { page_num_ = value_arg; }

const std::string& PurchaseMessage::check_value() const { return check_value_; }

void PurchaseMessage::set_check_value(std::string_view value_arg) {
  check_value_ = value_arg;
}

EncodableList PurchaseMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(5);
  list.push_back(EncodableValue(app_id_));
  list.push_back(EncodableValue(custom_id_));
  list.push_back(EncodableValue(country_code_));
  list.push_back(EncodableValue(page_num_));
  list.push_back(EncodableValue(check_value_));
  return list;
}

PurchaseMessage PurchaseMessage::FromEncodableList(const EncodableList& list) {
  PurchaseMessage decoded(
      std::get<std::string>(list[0]), std::get<std::string>(list[1]),
      std::get<std::string>(list[2]), std::get<int64_t>(list[3]),
      std::get<std::string>(list[4]));
  return decoded;
}

// OrderDetails

OrderDetails::OrderDetails(const std::string& order_item_id,
                           const std::string& order_title,
                           const std::string& order_total,
                           const std::string& order_currency_id,
                           const std::string& order_custom_id)
    : order_item_id_(order_item_id),
      order_title_(order_title),
      order_total_(order_total),
      order_currency_id_(order_currency_id),
      order_custom_id_(order_custom_id) {}

const std::string& OrderDetails::order_item_id() const {
  return order_item_id_;
}

void OrderDetails::set_order_item_id(std::string_view value_arg) {
  order_item_id_ = value_arg;
}

const std::string& OrderDetails::order_title() const { return order_title_; }

void OrderDetails::set_order_title(std::string_view value_arg) {
  order_title_ = value_arg;
}

const std::string& OrderDetails::order_total() const { return order_total_; }

void OrderDetails::set_order_total(std::string_view value_arg) {
  order_total_ = value_arg;
}

const std::string& OrderDetails::order_currency_id() const {
  return order_currency_id_;
}

void OrderDetails::set_order_currency_id(std::string_view value_arg) {
  order_currency_id_ = value_arg;
}

const std::string& OrderDetails::order_custom_id() const {
  return order_custom_id_;
}

void OrderDetails::set_order_custom_id(std::string_view value_arg) {
  order_custom_id_ = value_arg;
}

EncodableList OrderDetails::ToEncodableList() const {
  EncodableList list;
  list.reserve(5);
  list.push_back(EncodableValue(order_item_id_));
  list.push_back(EncodableValue(order_title_));
  list.push_back(EncodableValue(order_total_));
  list.push_back(EncodableValue(order_currency_id_));
  list.push_back(EncodableValue(order_custom_id_));
  return list;
}

OrderDetails OrderDetails::FromEncodableList(const EncodableList& list) {
  OrderDetails decoded(
      std::get<std::string>(list[0]), std::get<std::string>(list[1]),
      std::get<std::string>(list[2]), std::get<std::string>(list[3]),
      std::get<std::string>(list[4]));
  return decoded;
}

// BuyInfoMessage

BuyInfoMessage::BuyInfoMessage(const std::string& app_id,
                               const OrderDetails& pay_detials)
    : app_id_(app_id),
      pay_detials_(std::make_unique<OrderDetails>(pay_detials)) {}

BuyInfoMessage::BuyInfoMessage(const BuyInfoMessage& other)
    : app_id_(other.app_id_),
      pay_detials_(std::make_unique<OrderDetails>(*other.pay_detials_)) {}

BuyInfoMessage& BuyInfoMessage::operator=(const BuyInfoMessage& other) {
  app_id_ = other.app_id_;
  pay_detials_ = std::make_unique<OrderDetails>(*other.pay_detials_);
  return *this;
}

const std::string& BuyInfoMessage::app_id() const { return app_id_; }

void BuyInfoMessage::set_app_id(std::string_view value_arg) {
  app_id_ = value_arg;
}

const OrderDetails& BuyInfoMessage::pay_detials() const {
  return *pay_detials_;
}

void BuyInfoMessage::set_pay_detials(const OrderDetails& value_arg) {
  pay_detials_ = std::make_unique<OrderDetails>(value_arg);
}

EncodableList BuyInfoMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(app_id_));
  list.push_back(CustomEncodableValue(*pay_detials_));
  return list;
}

BuyInfoMessage BuyInfoMessage::FromEncodableList(const EncodableList& list) {
  BuyInfoMessage decoded(std::get<std::string>(list[0]),
                         std::any_cast<const OrderDetails&>(
                             std::get<CustomEncodableValue>(list[1])));
  return decoded;
}

// InvoiceMessage

InvoiceMessage::InvoiceMessage(const std::string& app_id,
                               const std::string& custom_id,
                               const std::string& invoice_id,
                               const std::string& country_code)
    : app_id_(app_id),
      custom_id_(custom_id),
      invoice_id_(invoice_id),
      country_code_(country_code) {}

const std::string& InvoiceMessage::app_id() const { return app_id_; }

void InvoiceMessage::set_app_id(std::string_view value_arg) {
  app_id_ = value_arg;
}

const std::string& InvoiceMessage::custom_id() const { return custom_id_; }

void InvoiceMessage::set_custom_id(std::string_view value_arg) {
  custom_id_ = value_arg;
}

const std::string& InvoiceMessage::invoice_id() const { return invoice_id_; }

void InvoiceMessage::set_invoice_id(std::string_view value_arg) {
  invoice_id_ = value_arg;
}

const std::string& InvoiceMessage::country_code() const {
  return country_code_;
}

void InvoiceMessage::set_country_code(std::string_view value_arg) {
  country_code_ = value_arg;
}

EncodableList InvoiceMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(4);
  list.push_back(EncodableValue(app_id_));
  list.push_back(EncodableValue(custom_id_));
  list.push_back(EncodableValue(invoice_id_));
  list.push_back(EncodableValue(country_code_));
  return list;
}

InvoiceMessage InvoiceMessage::FromEncodableList(const EncodableList& list) {
  InvoiceMessage decoded(
      std::get<std::string>(list[0]), std::get<std::string>(list[1]),
      std::get<std::string>(list[2]), std::get<std::string>(list[3]));
  return decoded;
}

PigeonInternalCodecSerializer::PigeonInternalCodecSerializer() {}

EncodableValue PigeonInternalCodecSerializer::ReadValueOfType(
    uint8_t type, flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 129: {
      return CustomEncodableValue(ProductsListApiResult::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    }
    case 130: {
      return CustomEncodableValue(
          GetUserPurchaseListAPIResult::FromEncodableList(
              std::get<EncodableList>(ReadValue(stream))));
    }
    case 131: {
      return CustomEncodableValue(BillingBuyData::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    }
    case 132: {
      return CustomEncodableValue(VerifyInvoiceAPIResult::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    }
    case 133: {
      return CustomEncodableValue(ServiceAvailableAPIResult::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    }
    case 134: {
      return CustomEncodableValue(ProductMessage::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    }
    case 135: {
      return CustomEncodableValue(PurchaseMessage::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    }
    case 136: {
      return CustomEncodableValue(OrderDetails::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    }
    case 137: {
      return CustomEncodableValue(BuyInfoMessage::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    }
    case 138: {
      return CustomEncodableValue(InvoiceMessage::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    }
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
  }
}

void PigeonInternalCodecSerializer::WriteValue(
    const EncodableValue& value, flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value =
          std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(ProductsListApiResult)) {
      stream->WriteByte(129);
      WriteValue(
          EncodableValue(std::any_cast<ProductsListApiResult>(*custom_value)
                             .ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(GetUserPurchaseListAPIResult)) {
      stream->WriteByte(130);
      WriteValue(EncodableValue(
                     std::any_cast<GetUserPurchaseListAPIResult>(*custom_value)
                         .ToEncodableList()),
                 stream);
      return;
    }
    if (custom_value->type() == typeid(BillingBuyData)) {
      stream->WriteByte(131);
      WriteValue(
          EncodableValue(
              std::any_cast<BillingBuyData>(*custom_value).ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(VerifyInvoiceAPIResult)) {
      stream->WriteByte(132);
      WriteValue(
          EncodableValue(std::any_cast<VerifyInvoiceAPIResult>(*custom_value)
                             .ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(ServiceAvailableAPIResult)) {
      stream->WriteByte(133);
      WriteValue(
          EncodableValue(std::any_cast<ServiceAvailableAPIResult>(*custom_value)
                             .ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(ProductMessage)) {
      stream->WriteByte(134);
      WriteValue(
          EncodableValue(
              std::any_cast<ProductMessage>(*custom_value).ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(PurchaseMessage)) {
      stream->WriteByte(135);
      WriteValue(
          EncodableValue(
              std::any_cast<PurchaseMessage>(*custom_value).ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(OrderDetails)) {
      stream->WriteByte(136);
      WriteValue(
          EncodableValue(
              std::any_cast<OrderDetails>(*custom_value).ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(BuyInfoMessage)) {
      stream->WriteByte(137);
      WriteValue(
          EncodableValue(
              std::any_cast<BuyInfoMessage>(*custom_value).ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(InvoiceMessage)) {
      stream->WriteByte(138);
      WriteValue(
          EncodableValue(
              std::any_cast<InvoiceMessage>(*custom_value).ToEncodableList()),
          stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by InAppPurchaseApi.
const flutter::StandardMessageCodec& InAppPurchaseApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(
      &PigeonInternalCodecSerializer::GetInstance());
}

// Sets up an instance of `InAppPurchaseApi` to handle messages through the
// `binary_messenger`.
void InAppPurchaseApi::SetUp(flutter::BinaryMessenger* binary_messenger,
                             InAppPurchaseApi* api) {
  InAppPurchaseApi::SetUp(binary_messenger, api, "");
}

void InAppPurchaseApi::SetUp(flutter::BinaryMessenger* binary_messenger,
                             InAppPurchaseApi* api,
                             const std::string& message_channel_suffix) {
  const std::string prepended_suffix =
      message_channel_suffix.length() > 0
          ? std::string(".") + message_channel_suffix
          : "";
  {
    BasicMessageChannel<> channel(binary_messenger,
                                  "dev.flutter.pigeon.in_app_purchase_tizen."
                                  "InAppPurchaseApi.getProductsList" +
                                      prepended_suffix,
                                  &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_product_arg = args.at(0);
              if (encodable_product_arg.IsNull()) {
                reply(WrapError("product_arg unexpectedly null."));
                return;
              }
              const auto& product_arg = std::any_cast<const ProductMessage&>(
                  std::get<CustomEncodableValue>(encodable_product_arg));
              api->GetProductsList(
                  product_arg,
                  [reply](ErrorOr<ProductsListApiResult>&& output) {
                    if (output.has_error()) {
                      reply(WrapError(output.error()));
                      return;
                    }
                    EncodableList wrapped;
                    wrapped.push_back(
                        CustomEncodableValue(std::move(output).TakeValue()));
                    reply(EncodableValue(std::move(wrapped)));
                  });
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger,
                                  "dev.flutter.pigeon.in_app_purchase_tizen."
                                  "InAppPurchaseApi.getUserPurchaseList" +
                                      prepended_suffix,
                                  &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_purchase_arg = args.at(0);
              if (encodable_purchase_arg.IsNull()) {
                reply(WrapError("purchase_arg unexpectedly null."));
                return;
              }
              const auto& purchase_arg = std::any_cast<const PurchaseMessage&>(
                  std::get<CustomEncodableValue>(encodable_purchase_arg));
              api->GetUserPurchaseList(
                  purchase_arg,
                  [reply](ErrorOr<GetUserPurchaseListAPIResult>&& output) {
                    if (output.has_error()) {
                      reply(WrapError(output.error()));
                      return;
                    }
                    EncodableList wrapped;
                    wrapped.push_back(
                        CustomEncodableValue(std::move(output).TakeValue()));
                    reply(EncodableValue(std::move(wrapped)));
                  });
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(
        binary_messenger,
        "dev.flutter.pigeon.in_app_purchase_tizen.InAppPurchaseApi.buyItem" +
            prepended_suffix,
        &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_buy_info_arg = args.at(0);
              if (encodable_buy_info_arg.IsNull()) {
                reply(WrapError("buy_info_arg unexpectedly null."));
                return;
              }
              const auto& buy_info_arg = std::any_cast<const BuyInfoMessage&>(
                  std::get<CustomEncodableValue>(encodable_buy_info_arg));
              api->BuyItem(
                  buy_info_arg, [reply](ErrorOr<BillingBuyData>&& output) {
                    if (output.has_error()) {
                      reply(WrapError(output.error()));
                      return;
                    }
                    EncodableList wrapped;
                    wrapped.push_back(
                        CustomEncodableValue(std::move(output).TakeValue()));
                    reply(EncodableValue(std::move(wrapped)));
                  });
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger,
                                  "dev.flutter.pigeon.in_app_purchase_tizen."
                                  "InAppPurchaseApi.verifyInvoice" +
                                      prepended_suffix,
                                  &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_invoice_arg = args.at(0);
              if (encodable_invoice_arg.IsNull()) {
                reply(WrapError("invoice_arg unexpectedly null."));
                return;
              }
              const auto& invoice_arg = std::any_cast<const InvoiceMessage&>(
                  std::get<CustomEncodableValue>(encodable_invoice_arg));
              api->VerifyInvoice(
                  invoice_arg,
                  [reply](ErrorOr<VerifyInvoiceAPIResult>&& output) {
                    if (output.has_error()) {
                      reply(WrapError(output.error()));
                      return;
                    }
                    EncodableList wrapped;
                    wrapped.push_back(
                        CustomEncodableValue(std::move(output).TakeValue()));
                    reply(EncodableValue(std::move(wrapped)));
                  });
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger,
                                  "dev.flutter.pigeon.in_app_purchase_tizen."
                                  "InAppPurchaseApi.isServiceAvailable" +
                                      prepended_suffix,
                                  &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              api->IsServiceAvailable([reply](ErrorOr<bool>&& output) {
                if (output.has_error()) {
                  reply(WrapError(output.error()));
                  return;
                }
                EncodableList wrapped;
                wrapped.push_back(
                    EncodableValue(std::move(output).TakeValue()));
                reply(EncodableValue(std::move(wrapped)));
              });
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger,
                                  "dev.flutter.pigeon.in_app_purchase_tizen."
                                  "InAppPurchaseApi.getCustomId" +
                                      prepended_suffix,
                                  &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              ErrorOr<std::string> output = api->GetCustomId();
              if (output.has_error()) {
                reply(WrapError(output.error()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger,
                                  "dev.flutter.pigeon.in_app_purchase_tizen."
                                  "InAppPurchaseApi.getCountryCode" +
                                      prepended_suffix,
                                  &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              ErrorOr<std::string> output = api->GetCountryCode();
              if (output.has_error()) {
                reply(WrapError(output.error()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
}

EncodableValue InAppPurchaseApi::WrapError(std::string_view error_message) {
  return EncodableValue(
      EncodableList{EncodableValue(std::string(error_message)),
                    EncodableValue("Error"), EncodableValue()});
}

EncodableValue InAppPurchaseApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{EncodableValue(error.code()),
                                      EncodableValue(error.message()),
                                      error.details()});
}
