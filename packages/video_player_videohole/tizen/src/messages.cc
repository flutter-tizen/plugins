// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "messages.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

// PlayerMessage

PlayerMessage::PlayerMessage(int64_t player_id) : player_id_(player_id) {}

int64_t PlayerMessage::player_id() const { return player_id_; }

void PlayerMessage::set_player_id(int64_t value_arg) { player_id_ = value_arg; }

EncodableList PlayerMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(1);
  list.push_back(EncodableValue(player_id_));
  return list;
}

PlayerMessage PlayerMessage::FromEncodableList(const EncodableList& list) {
  PlayerMessage decoded(list[0].LongValue());
  return decoded;
}

// LoopingMessage

LoopingMessage::LoopingMessage(int64_t player_id, bool is_looping)
    : player_id_(player_id), is_looping_(is_looping) {}

int64_t LoopingMessage::player_id() const { return player_id_; }

void LoopingMessage::set_player_id(int64_t value_arg) {
  player_id_ = value_arg;
}

bool LoopingMessage::is_looping() const { return is_looping_; }

void LoopingMessage::set_is_looping(bool value_arg) { is_looping_ = value_arg; }

EncodableList LoopingMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(player_id_));
  list.push_back(EncodableValue(is_looping_));
  return list;
}

LoopingMessage LoopingMessage::FromEncodableList(const EncodableList& list) {
  LoopingMessage decoded(list[0].LongValue(), std::get<bool>(list[1]));
  return decoded;
}

// VolumeMessage

VolumeMessage::VolumeMessage(int64_t player_id, double volume)
    : player_id_(player_id), volume_(volume) {}

int64_t VolumeMessage::player_id() const { return player_id_; }

void VolumeMessage::set_player_id(int64_t value_arg) { player_id_ = value_arg; }

double VolumeMessage::volume() const { return volume_; }

void VolumeMessage::set_volume(double value_arg) { volume_ = value_arg; }

EncodableList VolumeMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(player_id_));
  list.push_back(EncodableValue(volume_));
  return list;
}

VolumeMessage VolumeMessage::FromEncodableList(const EncodableList& list) {
  VolumeMessage decoded(list[0].LongValue(), std::get<double>(list[1]));
  return decoded;
}

// PlaybackSpeedMessage

PlaybackSpeedMessage::PlaybackSpeedMessage(int64_t player_id, double speed)
    : player_id_(player_id), speed_(speed) {}

int64_t PlaybackSpeedMessage::player_id() const { return player_id_; }

void PlaybackSpeedMessage::set_player_id(int64_t value_arg) {
  player_id_ = value_arg;
}

double PlaybackSpeedMessage::speed() const { return speed_; }

void PlaybackSpeedMessage::set_speed(double value_arg) { speed_ = value_arg; }

EncodableList PlaybackSpeedMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(player_id_));
  list.push_back(EncodableValue(speed_));
  return list;
}

PlaybackSpeedMessage PlaybackSpeedMessage::FromEncodableList(
    const EncodableList& list) {
  PlaybackSpeedMessage decoded(list[0].LongValue(), std::get<double>(list[1]));
  return decoded;
}

// PositionMessage

PositionMessage::PositionMessage(int64_t player_id, int64_t position)
    : player_id_(player_id), position_(position) {}

int64_t PositionMessage::player_id() const { return player_id_; }

void PositionMessage::set_player_id(int64_t value_arg) {
  player_id_ = value_arg;
}

int64_t PositionMessage::position() const { return position_; }

void PositionMessage::set_position(int64_t value_arg) { position_ = value_arg; }

EncodableList PositionMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(player_id_));
  list.push_back(EncodableValue(position_));
  return list;
}

PositionMessage PositionMessage::FromEncodableList(const EncodableList& list) {
  PositionMessage decoded(list[0].LongValue(), list[1].LongValue());
  return decoded;
}

// CreateMessage

CreateMessage::CreateMessage() {}

CreateMessage::CreateMessage(const std::string* asset, const std::string* uri,
                             const std::string* package_name,
                             const std::string* format_hint,
                             const EncodableMap* http_headers,
                             const EncodableMap* drm_configs)
    : asset_(asset ? std::optional<std::string>(*asset) : std::nullopt),
      uri_(uri ? std::optional<std::string>(*uri) : std::nullopt),
      package_name_(package_name ? std::optional<std::string>(*package_name)
                                 : std::nullopt),
      format_hint_(format_hint ? std::optional<std::string>(*format_hint)
                               : std::nullopt),
      http_headers_(http_headers ? std::optional<EncodableMap>(*http_headers)
                                 : std::nullopt),
      drm_configs_(drm_configs ? std::optional<EncodableMap>(*drm_configs)
                               : std::nullopt) {}

const std::string* CreateMessage::asset() const {
  return asset_ ? &(*asset_) : nullptr;
}

void CreateMessage::set_asset(const std::string_view* value_arg) {
  asset_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void CreateMessage::set_asset(std::string_view value_arg) {
  asset_ = value_arg;
}

const std::string* CreateMessage::uri() const {
  return uri_ ? &(*uri_) : nullptr;
}

void CreateMessage::set_uri(const std::string_view* value_arg) {
  uri_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void CreateMessage::set_uri(std::string_view value_arg) { uri_ = value_arg; }

const std::string* CreateMessage::package_name() const {
  return package_name_ ? &(*package_name_) : nullptr;
}

void CreateMessage::set_package_name(const std::string_view* value_arg) {
  package_name_ =
      value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void CreateMessage::set_package_name(std::string_view value_arg) {
  package_name_ = value_arg;
}

const std::string* CreateMessage::format_hint() const {
  return format_hint_ ? &(*format_hint_) : nullptr;
}

void CreateMessage::set_format_hint(const std::string_view* value_arg) {
  format_hint_ =
      value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void CreateMessage::set_format_hint(std::string_view value_arg) {
  format_hint_ = value_arg;
}

const EncodableMap* CreateMessage::http_headers() const {
  return http_headers_ ? &(*http_headers_) : nullptr;
}

void CreateMessage::set_http_headers(const EncodableMap* value_arg) {
  http_headers_ =
      value_arg ? std::optional<EncodableMap>(*value_arg) : std::nullopt;
}

void CreateMessage::set_http_headers(const EncodableMap& value_arg) {
  http_headers_ = value_arg;
}

const EncodableMap* CreateMessage::drm_configs() const {
  return drm_configs_ ? &(*drm_configs_) : nullptr;
}

void CreateMessage::set_drm_configs(const EncodableMap* value_arg) {
  drm_configs_ =
      value_arg ? std::optional<EncodableMap>(*value_arg) : std::nullopt;
}

void CreateMessage::set_drm_configs(const EncodableMap& value_arg) {
  drm_configs_ = value_arg;
}

EncodableList CreateMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(6);
  list.push_back(asset_ ? EncodableValue(*asset_) : EncodableValue());
  list.push_back(uri_ ? EncodableValue(*uri_) : EncodableValue());
  list.push_back(package_name_ ? EncodableValue(*package_name_)
                               : EncodableValue());
  list.push_back(format_hint_ ? EncodableValue(*format_hint_)
                              : EncodableValue());
  list.push_back(http_headers_ ? EncodableValue(*http_headers_)
                               : EncodableValue());
  list.push_back(drm_configs_ ? EncodableValue(*drm_configs_)
                              : EncodableValue());
  return list;
}

CreateMessage CreateMessage::FromEncodableList(const EncodableList& list) {
  CreateMessage decoded;
  auto& encodable_asset = list[0];
  if (!encodable_asset.IsNull()) {
    decoded.set_asset(std::get<std::string>(encodable_asset));
  }
  auto& encodable_uri = list[1];
  if (!encodable_uri.IsNull()) {
    decoded.set_uri(std::get<std::string>(encodable_uri));
  }
  auto& encodable_package_name = list[2];
  if (!encodable_package_name.IsNull()) {
    decoded.set_package_name(std::get<std::string>(encodable_package_name));
  }
  auto& encodable_format_hint = list[3];
  if (!encodable_format_hint.IsNull()) {
    decoded.set_format_hint(std::get<std::string>(encodable_format_hint));
  }
  auto& encodable_http_headers = list[4];
  if (!encodable_http_headers.IsNull()) {
    decoded.set_http_headers(std::get<EncodableMap>(encodable_http_headers));
  }
  auto& encodable_drm_configs = list[5];
  if (!encodable_drm_configs.IsNull()) {
    decoded.set_drm_configs(std::get<EncodableMap>(encodable_drm_configs));
  }
  return decoded;
}

// MixWithOthersMessage

MixWithOthersMessage::MixWithOthersMessage(bool mix_with_others)
    : mix_with_others_(mix_with_others) {}

bool MixWithOthersMessage::mix_with_others() const { return mix_with_others_; }

void MixWithOthersMessage::set_mix_with_others(bool value_arg) {
  mix_with_others_ = value_arg;
}

EncodableList MixWithOthersMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(1);
  list.push_back(EncodableValue(mix_with_others_));
  return list;
}

MixWithOthersMessage MixWithOthersMessage::FromEncodableList(
    const EncodableList& list) {
  MixWithOthersMessage decoded(std::get<bool>(list[0]));
  return decoded;
}

// GeometryMessage

GeometryMessage::GeometryMessage(int64_t player_id, int64_t x, int64_t y,
                                 int64_t width, int64_t height)
    : player_id_(player_id), x_(x), y_(y), width_(width), height_(height) {}

int64_t GeometryMessage::player_id() const { return player_id_; }

void GeometryMessage::set_player_id(int64_t value_arg) {
  player_id_ = value_arg;
}

int64_t GeometryMessage::x() const { return x_; }

void GeometryMessage::set_x(int64_t value_arg) { x_ = value_arg; }

int64_t GeometryMessage::y() const { return y_; }

void GeometryMessage::set_y(int64_t value_arg) { y_ = value_arg; }

int64_t GeometryMessage::width() const { return width_; }

void GeometryMessage::set_width(int64_t value_arg) { width_ = value_arg; }

int64_t GeometryMessage::height() const { return height_; }

void GeometryMessage::set_height(int64_t value_arg) { height_ = value_arg; }

EncodableList GeometryMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(5);
  list.push_back(EncodableValue(player_id_));
  list.push_back(EncodableValue(x_));
  list.push_back(EncodableValue(y_));
  list.push_back(EncodableValue(width_));
  list.push_back(EncodableValue(height_));
  return list;
}

GeometryMessage GeometryMessage::FromEncodableList(const EncodableList& list) {
  GeometryMessage decoded(list[0].LongValue(), list[1].LongValue(),
                          list[2].LongValue(), list[3].LongValue(),
                          list[4].LongValue());
  return decoded;
}

VideoPlayerVideoholeApiCodecSerializer::
    VideoPlayerVideoholeApiCodecSerializer() {}

EncodableValue VideoPlayerVideoholeApiCodecSerializer::ReadValueOfType(
    uint8_t type, flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 128:
      return CustomEncodableValue(CreateMessage::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    case 129:
      return CustomEncodableValue(GeometryMessage::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    case 130:
      return CustomEncodableValue(LoopingMessage::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    case 131:
      return CustomEncodableValue(MixWithOthersMessage::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    case 132:
      return CustomEncodableValue(PlaybackSpeedMessage::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    case 133:
      return CustomEncodableValue(PlayerMessage::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    case 134:
      return CustomEncodableValue(PositionMessage::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    case 135:
      return CustomEncodableValue(VolumeMessage::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
  }
}

void VideoPlayerVideoholeApiCodecSerializer::WriteValue(
    const EncodableValue& value, flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value =
          std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(CreateMessage)) {
      stream->WriteByte(128);
      WriteValue(
          EncodableValue(
              std::any_cast<CreateMessage>(*custom_value).ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(GeometryMessage)) {
      stream->WriteByte(129);
      WriteValue(
          EncodableValue(
              std::any_cast<GeometryMessage>(*custom_value).ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(LoopingMessage)) {
      stream->WriteByte(130);
      WriteValue(
          EncodableValue(
              std::any_cast<LoopingMessage>(*custom_value).ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(MixWithOthersMessage)) {
      stream->WriteByte(131);
      WriteValue(
          EncodableValue(std::any_cast<MixWithOthersMessage>(*custom_value)
                             .ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(PlaybackSpeedMessage)) {
      stream->WriteByte(132);
      WriteValue(
          EncodableValue(std::any_cast<PlaybackSpeedMessage>(*custom_value)
                             .ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(PlayerMessage)) {
      stream->WriteByte(133);
      WriteValue(
          EncodableValue(
              std::any_cast<PlayerMessage>(*custom_value).ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(PositionMessage)) {
      stream->WriteByte(134);
      WriteValue(
          EncodableValue(
              std::any_cast<PositionMessage>(*custom_value).ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(VolumeMessage)) {
      stream->WriteByte(135);
      WriteValue(
          EncodableValue(
              std::any_cast<VolumeMessage>(*custom_value).ToEncodableList()),
          stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by VideoPlayerVideoholeApi.
const flutter::StandardMessageCodec& VideoPlayerVideoholeApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(
      &VideoPlayerVideoholeApiCodecSerializer::GetInstance());
}

// Sets up an instance of `VideoPlayerVideoholeApi` to handle messages through
// the `binary_messenger`.
void VideoPlayerVideoholeApi::SetUp(flutter::BinaryMessenger* binary_messenger,
                                    VideoPlayerVideoholeApi* api) {
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(
        binary_messenger,
        "dev.flutter.pigeon.VideoPlayerVideoholeApi.initialize", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              std::optional<FlutterError> output = api->Initialize();
              if (output.has_value()) {
                reply(WrapError(output.value()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(EncodableValue());
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(
        binary_messenger, "dev.flutter.pigeon.VideoPlayerVideoholeApi.create",
        &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const CreateMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              ErrorOr<PlayerMessage> output = api->Create(msg_arg);
              if (output.has_error()) {
                reply(WrapError(output.error()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(
                  CustomEncodableValue(std::move(output).TakeValue()));
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(
        binary_messenger, "dev.flutter.pigeon.VideoPlayerVideoholeApi.dispose",
        &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const PlayerMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              std::optional<FlutterError> output = api->Dispose(msg_arg);
              if (output.has_value()) {
                reply(WrapError(output.value()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(EncodableValue());
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(
        binary_messenger,
        "dev.flutter.pigeon.VideoPlayerVideoholeApi.setLooping", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const LoopingMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              std::optional<FlutterError> output = api->SetLooping(msg_arg);
              if (output.has_value()) {
                reply(WrapError(output.value()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(EncodableValue());
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(
        binary_messenger,
        "dev.flutter.pigeon.VideoPlayerVideoholeApi.setVolume", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const VolumeMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              std::optional<FlutterError> output = api->SetVolume(msg_arg);
              if (output.has_value()) {
                reply(WrapError(output.value()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(EncodableValue());
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(
        binary_messenger,
        "dev.flutter.pigeon.VideoPlayerVideoholeApi.setPlaybackSpeed",
        &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const PlaybackSpeedMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              std::optional<FlutterError> output =
                  api->SetPlaybackSpeed(msg_arg);
              if (output.has_value()) {
                reply(WrapError(output.value()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(EncodableValue());
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(
        binary_messenger, "dev.flutter.pigeon.VideoPlayerVideoholeApi.play",
        &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const PlayerMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              std::optional<FlutterError> output = api->Play(msg_arg);
              if (output.has_value()) {
                reply(WrapError(output.value()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(EncodableValue());
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(
        binary_messenger, "dev.flutter.pigeon.VideoPlayerVideoholeApi.position",
        &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const PlayerMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              ErrorOr<PositionMessage> output = api->Position(msg_arg);
              if (output.has_error()) {
                reply(WrapError(output.error()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(
                  CustomEncodableValue(std::move(output).TakeValue()));
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(
        binary_messenger, "dev.flutter.pigeon.VideoPlayerVideoholeApi.seekTo",
        &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const PositionMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              api->SeekTo(msg_arg,
                          [reply](std::optional<FlutterError>&& output) {
                            if (output.has_value()) {
                              reply(WrapError(output.value()));
                              return;
                            }
                            EncodableList wrapped;
                            wrapped.push_back(EncodableValue());
                            reply(EncodableValue(std::move(wrapped)));
                          });
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(
        binary_messenger, "dev.flutter.pigeon.VideoPlayerVideoholeApi.pause",
        &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const PlayerMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              std::optional<FlutterError> output = api->Pause(msg_arg);
              if (output.has_value()) {
                reply(WrapError(output.value()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(EncodableValue());
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(
        binary_messenger,
        "dev.flutter.pigeon.VideoPlayerVideoholeApi.setMixWithOthers",
        &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const MixWithOthersMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              std::optional<FlutterError> output =
                  api->SetMixWithOthers(msg_arg);
              if (output.has_value()) {
                reply(WrapError(output.value()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(EncodableValue());
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(
        binary_messenger,
        "dev.flutter.pigeon.VideoPlayerVideoholeApi.setDisplayGeometry",
        &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const GeometryMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              std::optional<FlutterError> output =
                  api->SetDisplayGeometry(msg_arg);
              if (output.has_value()) {
                reply(WrapError(output.value()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(EncodableValue());
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
}

EncodableValue VideoPlayerVideoholeApi::WrapError(
    std::string_view error_message) {
  return EncodableValue(
      EncodableList{EncodableValue(std::string(error_message)),
                    EncodableValue("Error"), EncodableValue()});
}

EncodableValue VideoPlayerVideoholeApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{EncodableValue(error.code()),
                                      EncodableValue(error.message()),
                                      error.details()});
}
