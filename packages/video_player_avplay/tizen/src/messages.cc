// Autogenerated from Pigeon (v22.7.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "messages.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

FlutterError CreateConnectionError(const std::string channel_name) {
  return FlutterError(
      "channel-error",
      "Unable to establish connection on channel: '" + channel_name + "'.",
      EncodableValue(""));
}

// PlayerMessage

PlayerMessage::PlayerMessage(int64_t player_id) : player_id_(player_id) {}

int64_t PlayerMessage::player_id() const { return player_id_; }

void PlayerMessage::set_player_id(int64_t value_arg) { player_id_ = value_arg; }

EncodableList PlayerMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(1);
  list.push_back(EncodableValue(player_id_));
  return list;
}

PlayerMessage PlayerMessage::FromEncodableList(const EncodableList& list) {
  PlayerMessage decoded(std::get<int64_t>(list[0]));
  return decoded;
}

// LoopingMessage

LoopingMessage::LoopingMessage(int64_t player_id, bool is_looping)
    : player_id_(player_id), is_looping_(is_looping) {}

int64_t LoopingMessage::player_id() const { return player_id_; }

void LoopingMessage::set_player_id(int64_t value_arg) {
  player_id_ = value_arg;
}

bool LoopingMessage::is_looping() const { return is_looping_; }

void LoopingMessage::set_is_looping(bool value_arg) { is_looping_ = value_arg; }

EncodableList LoopingMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(player_id_));
  list.push_back(EncodableValue(is_looping_));
  return list;
}

LoopingMessage LoopingMessage::FromEncodableList(const EncodableList& list) {
  LoopingMessage decoded(std::get<int64_t>(list[0]), std::get<bool>(list[1]));
  return decoded;
}

// VolumeMessage

VolumeMessage::VolumeMessage(int64_t player_id, double volume)
    : player_id_(player_id), volume_(volume) {}

int64_t VolumeMessage::player_id() const { return player_id_; }

void VolumeMessage::set_player_id(int64_t value_arg) { player_id_ = value_arg; }

double VolumeMessage::volume() const { return volume_; }

void VolumeMessage::set_volume(double value_arg) { volume_ = value_arg; }

EncodableList VolumeMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(player_id_));
  list.push_back(EncodableValue(volume_));
  return list;
}

VolumeMessage VolumeMessage::FromEncodableList(const EncodableList& list) {
  VolumeMessage decoded(std::get<int64_t>(list[0]), std::get<double>(list[1]));
  return decoded;
}

// PlaybackSpeedMessage

PlaybackSpeedMessage::PlaybackSpeedMessage(int64_t player_id, double speed)
    : player_id_(player_id), speed_(speed) {}

int64_t PlaybackSpeedMessage::player_id() const { return player_id_; }

void PlaybackSpeedMessage::set_player_id(int64_t value_arg) {
  player_id_ = value_arg;
}

double PlaybackSpeedMessage::speed() const { return speed_; }

void PlaybackSpeedMessage::set_speed(double value_arg) { speed_ = value_arg; }

EncodableList PlaybackSpeedMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(player_id_));
  list.push_back(EncodableValue(speed_));
  return list;
}

PlaybackSpeedMessage PlaybackSpeedMessage::FromEncodableList(
    const EncodableList& list) {
  PlaybackSpeedMessage decoded(std::get<int64_t>(list[0]),
                               std::get<double>(list[1]));
  return decoded;
}

// TrackMessage

TrackMessage::TrackMessage(int64_t player_id, const EncodableList& tracks)
    : player_id_(player_id), tracks_(tracks) {}

int64_t TrackMessage::player_id() const { return player_id_; }

void TrackMessage::set_player_id(int64_t value_arg) { player_id_ = value_arg; }

const EncodableList& TrackMessage::tracks() const { return tracks_; }

void TrackMessage::set_tracks(const EncodableList& value_arg) {
  tracks_ = value_arg;
}

EncodableList TrackMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(player_id_));
  list.push_back(EncodableValue(tracks_));
  return list;
}

TrackMessage TrackMessage::FromEncodableList(const EncodableList& list) {
  TrackMessage decoded(std::get<int64_t>(list[0]),
                       std::get<EncodableList>(list[1]));
  return decoded;
}

// TrackTypeMessage

TrackTypeMessage::TrackTypeMessage(int64_t player_id,
                                   const std::string& track_type)
    : player_id_(player_id), track_type_(track_type) {}

int64_t TrackTypeMessage::player_id() const { return player_id_; }

void TrackTypeMessage::set_player_id(int64_t value_arg) {
  player_id_ = value_arg;
}

const std::string& TrackTypeMessage::track_type() const { return track_type_; }

void TrackTypeMessage::set_track_type(std::string_view value_arg) {
  track_type_ = value_arg;
}

EncodableList TrackTypeMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(player_id_));
  list.push_back(EncodableValue(track_type_));
  return list;
}

TrackTypeMessage TrackTypeMessage::FromEncodableList(
    const EncodableList& list) {
  TrackTypeMessage decoded(std::get<int64_t>(list[0]),
                           std::get<std::string>(list[1]));
  return decoded;
}

// SelectedTracksMessage

SelectedTracksMessage::SelectedTracksMessage(int64_t player_id,
                                             int64_t track_id,
                                             const std::string& track_type)
    : player_id_(player_id), track_id_(track_id), track_type_(track_type) {}

int64_t SelectedTracksMessage::player_id() const { return player_id_; }

void SelectedTracksMessage::set_player_id(int64_t value_arg) {
  player_id_ = value_arg;
}

int64_t SelectedTracksMessage::track_id() const { return track_id_; }

void SelectedTracksMessage::set_track_id(int64_t value_arg) {
  track_id_ = value_arg;
}

const std::string& SelectedTracksMessage::track_type() const {
  return track_type_;
}

void SelectedTracksMessage::set_track_type(std::string_view value_arg) {
  track_type_ = value_arg;
}

EncodableList SelectedTracksMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(EncodableValue(player_id_));
  list.push_back(EncodableValue(track_id_));
  list.push_back(EncodableValue(track_type_));
  return list;
}

SelectedTracksMessage SelectedTracksMessage::FromEncodableList(
    const EncodableList& list) {
  SelectedTracksMessage decoded(std::get<int64_t>(list[0]),
                                std::get<int64_t>(list[1]),
                                std::get<std::string>(list[2]));
  return decoded;
}

// PositionMessage

PositionMessage::PositionMessage(int64_t player_id, int64_t position)
    : player_id_(player_id), position_(position) {}

int64_t PositionMessage::player_id() const { return player_id_; }

void PositionMessage::set_player_id(int64_t value_arg) {
  player_id_ = value_arg;
}

int64_t PositionMessage::position() const { return position_; }

void PositionMessage::set_position(int64_t value_arg) { position_ = value_arg; }

EncodableList PositionMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(player_id_));
  list.push_back(EncodableValue(position_));
  return list;
}

PositionMessage PositionMessage::FromEncodableList(const EncodableList& list) {
  PositionMessage decoded(std::get<int64_t>(list[0]),
                          std::get<int64_t>(list[1]));
  return decoded;
}

// CreateMessage

CreateMessage::CreateMessage() {}

CreateMessage::CreateMessage(const std::string* asset, const std::string* uri,
                             const std::string* package_name,
                             const std::string* format_hint,
                             const EncodableMap* http_headers,
                             const EncodableMap* drm_configs,
                             const EncodableMap* player_options,
                             const EncodableMap* streaming_property)
    : asset_(asset ? std::optional<std::string>(*asset) : std::nullopt),
      uri_(uri ? std::optional<std::string>(*uri) : std::nullopt),
      package_name_(package_name ? std::optional<std::string>(*package_name)
                                 : std::nullopt),
      format_hint_(format_hint ? std::optional<std::string>(*format_hint)
                               : std::nullopt),
      http_headers_(http_headers ? std::optional<EncodableMap>(*http_headers)
                                 : std::nullopt),
      drm_configs_(drm_configs ? std::optional<EncodableMap>(*drm_configs)
                               : std::nullopt),
      player_options_(player_options
                          ? std::optional<EncodableMap>(*player_options)
                          : std::nullopt),
      streaming_property_(streaming_property
                              ? std::optional<EncodableMap>(*streaming_property)
                              : std::nullopt) {}

const std::string* CreateMessage::asset() const {
  return asset_ ? &(*asset_) : nullptr;
}

void CreateMessage::set_asset(const std::string_view* value_arg) {
  asset_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void CreateMessage::set_asset(std::string_view value_arg) {
  asset_ = value_arg;
}

const std::string* CreateMessage::uri() const {
  return uri_ ? &(*uri_) : nullptr;
}

void CreateMessage::set_uri(const std::string_view* value_arg) {
  uri_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void CreateMessage::set_uri(std::string_view value_arg) { uri_ = value_arg; }

const std::string* CreateMessage::package_name() const {
  return package_name_ ? &(*package_name_) : nullptr;
}

void CreateMessage::set_package_name(const std::string_view* value_arg) {
  package_name_ =
      value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void CreateMessage::set_package_name(std::string_view value_arg) {
  package_name_ = value_arg;
}

const std::string* CreateMessage::format_hint() const {
  return format_hint_ ? &(*format_hint_) : nullptr;
}

void CreateMessage::set_format_hint(const std::string_view* value_arg) {
  format_hint_ =
      value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void CreateMessage::set_format_hint(std::string_view value_arg) {
  format_hint_ = value_arg;
}

const EncodableMap* CreateMessage::http_headers() const {
  return http_headers_ ? &(*http_headers_) : nullptr;
}

void CreateMessage::set_http_headers(const EncodableMap* value_arg) {
  http_headers_ =
      value_arg ? std::optional<EncodableMap>(*value_arg) : std::nullopt;
}

void CreateMessage::set_http_headers(const EncodableMap& value_arg) {
  http_headers_ = value_arg;
}

const EncodableMap* CreateMessage::drm_configs() const {
  return drm_configs_ ? &(*drm_configs_) : nullptr;
}

void CreateMessage::set_drm_configs(const EncodableMap* value_arg) {
  drm_configs_ =
      value_arg ? std::optional<EncodableMap>(*value_arg) : std::nullopt;
}

void CreateMessage::set_drm_configs(const EncodableMap& value_arg) {
  drm_configs_ = value_arg;
}

const EncodableMap* CreateMessage::player_options() const {
  return player_options_ ? &(*player_options_) : nullptr;
}

void CreateMessage::set_player_options(const EncodableMap* value_arg) {
  player_options_ =
      value_arg ? std::optional<EncodableMap>(*value_arg) : std::nullopt;
}

void CreateMessage::set_player_options(const EncodableMap& value_arg) {
  player_options_ = value_arg;
}

const EncodableMap* CreateMessage::streaming_property() const {
  return streaming_property_ ? &(*streaming_property_) : nullptr;
}

void CreateMessage::set_streaming_property(const EncodableMap* value_arg) {
  streaming_property_ =
      value_arg ? std::optional<EncodableMap>(*value_arg) : std::nullopt;
}

void CreateMessage::set_streaming_property(const EncodableMap& value_arg) {
  streaming_property_ = value_arg;
}

EncodableList CreateMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(8);
  list.push_back(asset_ ? EncodableValue(*asset_) : EncodableValue());
  list.push_back(uri_ ? EncodableValue(*uri_) : EncodableValue());
  list.push_back(package_name_ ? EncodableValue(*package_name_)
                               : EncodableValue());
  list.push_back(format_hint_ ? EncodableValue(*format_hint_)
                              : EncodableValue());
  list.push_back(http_headers_ ? EncodableValue(*http_headers_)
                               : EncodableValue());
  list.push_back(drm_configs_ ? EncodableValue(*drm_configs_)
                              : EncodableValue());
  list.push_back(player_options_ ? EncodableValue(*player_options_)
                                 : EncodableValue());
  list.push_back(streaming_property_ ? EncodableValue(*streaming_property_)
                                     : EncodableValue());
  return list;
}

CreateMessage CreateMessage::FromEncodableList(const EncodableList& list) {
  CreateMessage decoded;
  auto& encodable_asset = list[0];
  if (!encodable_asset.IsNull()) {
    decoded.set_asset(std::get<std::string>(encodable_asset));
  }
  auto& encodable_uri = list[1];
  if (!encodable_uri.IsNull()) {
    decoded.set_uri(std::get<std::string>(encodable_uri));
  }
  auto& encodable_package_name = list[2];
  if (!encodable_package_name.IsNull()) {
    decoded.set_package_name(std::get<std::string>(encodable_package_name));
  }
  auto& encodable_format_hint = list[3];
  if (!encodable_format_hint.IsNull()) {
    decoded.set_format_hint(std::get<std::string>(encodable_format_hint));
  }
  auto& encodable_http_headers = list[4];
  if (!encodable_http_headers.IsNull()) {
    decoded.set_http_headers(std::get<EncodableMap>(encodable_http_headers));
  }
  auto& encodable_drm_configs = list[5];
  if (!encodable_drm_configs.IsNull()) {
    decoded.set_drm_configs(std::get<EncodableMap>(encodable_drm_configs));
  }
  auto& encodable_player_options = list[6];
  if (!encodable_player_options.IsNull()) {
    decoded.set_player_options(
        std::get<EncodableMap>(encodable_player_options));
  }
  auto& encodable_streaming_property = list[7];
  if (!encodable_streaming_property.IsNull()) {
    decoded.set_streaming_property(
        std::get<EncodableMap>(encodable_streaming_property));
  }
  return decoded;
}

// MixWithOthersMessage

MixWithOthersMessage::MixWithOthersMessage(bool mix_with_others)
    : mix_with_others_(mix_with_others) {}

bool MixWithOthersMessage::mix_with_others() const { return mix_with_others_; }

void MixWithOthersMessage::set_mix_with_others(bool value_arg) {
  mix_with_others_ = value_arg;
}

EncodableList MixWithOthersMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(1);
  list.push_back(EncodableValue(mix_with_others_));
  return list;
}

MixWithOthersMessage MixWithOthersMessage::FromEncodableList(
    const EncodableList& list) {
  MixWithOthersMessage decoded(std::get<bool>(list[0]));
  return decoded;
}

// GeometryMessage

GeometryMessage::GeometryMessage(int64_t player_id, int64_t x, int64_t y,
                                 int64_t width, int64_t height)
    : player_id_(player_id), x_(x), y_(y), width_(width), height_(height) {}

int64_t GeometryMessage::player_id() const { return player_id_; }

void GeometryMessage::set_player_id(int64_t value_arg) {
  player_id_ = value_arg;
}

int64_t GeometryMessage::x() const { return x_; }

void GeometryMessage::set_x(int64_t value_arg) { x_ = value_arg; }

int64_t GeometryMessage::y() const { return y_; }

void GeometryMessage::set_y(int64_t value_arg) { y_ = value_arg; }

int64_t GeometryMessage::width() const { return width_; }

void GeometryMessage::set_width(int64_t value_arg) { width_ = value_arg; }

int64_t GeometryMessage::height() const { return height_; }

void GeometryMessage::set_height(int64_t value_arg) { height_ = value_arg; }

EncodableList GeometryMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(5);
  list.push_back(EncodableValue(player_id_));
  list.push_back(EncodableValue(x_));
  list.push_back(EncodableValue(y_));
  list.push_back(EncodableValue(width_));
  list.push_back(EncodableValue(height_));
  return list;
}

GeometryMessage GeometryMessage::FromEncodableList(const EncodableList& list) {
  GeometryMessage decoded(
      std::get<int64_t>(list[0]), std::get<int64_t>(list[1]),
      std::get<int64_t>(list[2]), std::get<int64_t>(list[3]),
      std::get<int64_t>(list[4]));
  return decoded;
}

// DurationMessage

DurationMessage::DurationMessage(int64_t player_id) : player_id_(player_id) {}

DurationMessage::DurationMessage(int64_t player_id,
                                 const EncodableList* duration_range)
    : player_id_(player_id),
      duration_range_(duration_range
                          ? std::optional<EncodableList>(*duration_range)
                          : std::nullopt) {}

int64_t DurationMessage::player_id() const { return player_id_; }

void DurationMessage::set_player_id(int64_t value_arg) {
  player_id_ = value_arg;
}

const EncodableList* DurationMessage::duration_range() const {
  return duration_range_ ? &(*duration_range_) : nullptr;
}

void DurationMessage::set_duration_range(const EncodableList* value_arg) {
  duration_range_ =
      value_arg ? std::optional<EncodableList>(*value_arg) : std::nullopt;
}

void DurationMessage::set_duration_range(const EncodableList& value_arg) {
  duration_range_ = value_arg;
}

EncodableList DurationMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(player_id_));
  list.push_back(duration_range_ ? EncodableValue(*duration_range_)
                                 : EncodableValue());
  return list;
}

DurationMessage DurationMessage::FromEncodableList(const EncodableList& list) {
  DurationMessage decoded(std::get<int64_t>(list[0]));
  auto& encodable_duration_range = list[1];
  if (!encodable_duration_range.IsNull()) {
    decoded.set_duration_range(
        std::get<EncodableList>(encodable_duration_range));
  }
  return decoded;
}

// StreamingPropertyTypeMessage

StreamingPropertyTypeMessage::StreamingPropertyTypeMessage(
    int64_t player_id, const std::string& streaming_property_type)
    : player_id_(player_id),
      streaming_property_type_(streaming_property_type) {}

int64_t StreamingPropertyTypeMessage::player_id() const { return player_id_; }

void StreamingPropertyTypeMessage::set_player_id(int64_t value_arg) {
  player_id_ = value_arg;
}

const std::string& StreamingPropertyTypeMessage::streaming_property_type()
    const {
  return streaming_property_type_;
}

void StreamingPropertyTypeMessage::set_streaming_property_type(
    std::string_view value_arg) {
  streaming_property_type_ = value_arg;
}

EncodableList StreamingPropertyTypeMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(player_id_));
  list.push_back(EncodableValue(streaming_property_type_));
  return list;
}

StreamingPropertyTypeMessage StreamingPropertyTypeMessage::FromEncodableList(
    const EncodableList& list) {
  StreamingPropertyTypeMessage decoded(std::get<int64_t>(list[0]),
                                       std::get<std::string>(list[1]));
  return decoded;
}

// StreamingPropertyMessage

StreamingPropertyMessage::StreamingPropertyMessage(
    int64_t player_id, const std::string& streaming_property_type,
    const std::string& streaming_property_value)
    : player_id_(player_id),
      streaming_property_type_(streaming_property_type),
      streaming_property_value_(streaming_property_value) {}

int64_t StreamingPropertyMessage::player_id() const { return player_id_; }

void StreamingPropertyMessage::set_player_id(int64_t value_arg) {
  player_id_ = value_arg;
}

const std::string& StreamingPropertyMessage::streaming_property_type() const {
  return streaming_property_type_;
}

void StreamingPropertyMessage::set_streaming_property_type(
    std::string_view value_arg) {
  streaming_property_type_ = value_arg;
}

const std::string& StreamingPropertyMessage::streaming_property_value() const {
  return streaming_property_value_;
}

void StreamingPropertyMessage::set_streaming_property_value(
    std::string_view value_arg) {
  streaming_property_value_ = value_arg;
}

EncodableList StreamingPropertyMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(EncodableValue(player_id_));
  list.push_back(EncodableValue(streaming_property_type_));
  list.push_back(EncodableValue(streaming_property_value_));
  return list;
}

StreamingPropertyMessage StreamingPropertyMessage::FromEncodableList(
    const EncodableList& list) {
  StreamingPropertyMessage decoded(std::get<int64_t>(list[0]),
                                   std::get<std::string>(list[1]),
                                   std::get<std::string>(list[2]));
  return decoded;
}

// BufferConfigMessage

BufferConfigMessage::BufferConfigMessage(int64_t player_id,
                                         const std::string& buffer_config_type,
                                         int64_t buffer_config_value)
    : player_id_(player_id),
      buffer_config_type_(buffer_config_type),
      buffer_config_value_(buffer_config_value) {}

int64_t BufferConfigMessage::player_id() const { return player_id_; }

void BufferConfigMessage::set_player_id(int64_t value_arg) {
  player_id_ = value_arg;
}

const std::string& BufferConfigMessage::buffer_config_type() const {
  return buffer_config_type_;
}

void BufferConfigMessage::set_buffer_config_type(std::string_view value_arg) {
  buffer_config_type_ = value_arg;
}

int64_t BufferConfigMessage::buffer_config_value() const {
  return buffer_config_value_;
}

void BufferConfigMessage::set_buffer_config_value(int64_t value_arg) {
  buffer_config_value_ = value_arg;
}

EncodableList BufferConfigMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(3);
  list.push_back(EncodableValue(player_id_));
  list.push_back(EncodableValue(buffer_config_type_));
  list.push_back(EncodableValue(buffer_config_value_));
  return list;
}

BufferConfigMessage BufferConfigMessage::FromEncodableList(
    const EncodableList& list) {
  BufferConfigMessage decoded(std::get<int64_t>(list[0]),
                              std::get<std::string>(list[1]),
                              std::get<int64_t>(list[2]));
  return decoded;
}

// RotationMessage

RotationMessage::RotationMessage(int64_t player_id, int64_t rotation)
    : player_id_(player_id), rotation_(rotation) {}

int64_t RotationMessage::player_id() const { return player_id_; }

void RotationMessage::set_player_id(int64_t value_arg) {
  player_id_ = value_arg;
}

int64_t RotationMessage::rotation() const { return rotation_; }

void RotationMessage::set_rotation(int64_t value_arg) { rotation_ = value_arg; }

EncodableList RotationMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(player_id_));
  list.push_back(EncodableValue(rotation_));
  return list;
}

RotationMessage RotationMessage::FromEncodableList(const EncodableList& list) {
  RotationMessage decoded(std::get<int64_t>(list[0]),
                          std::get<int64_t>(list[1]));
  return decoded;
}

// DisplayModeMessage

DisplayModeMessage::DisplayModeMessage(int64_t player_id, int64_t display_mode)
    : player_id_(player_id), display_mode_(display_mode) {}

int64_t DisplayModeMessage::player_id() const { return player_id_; }

void DisplayModeMessage::set_player_id(int64_t value_arg) {
  player_id_ = value_arg;
}

int64_t DisplayModeMessage::display_mode() const { return display_mode_; }

void DisplayModeMessage::set_display_mode(int64_t value_arg) {
  display_mode_ = value_arg;
}

EncodableList DisplayModeMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(player_id_));
  list.push_back(EncodableValue(display_mode_));
  return list;
}

DisplayModeMessage DisplayModeMessage::FromEncodableList(
    const EncodableList& list) {
  DisplayModeMessage decoded(std::get<int64_t>(list[0]),
                             std::get<int64_t>(list[1]));
  return decoded;
}

// DashPropertyTypeListMessage

DashPropertyTypeListMessage::DashPropertyTypeListMessage(
    int64_t player_id, const EncodableList& type_list)
    : player_id_(player_id), type_list_(type_list) {}

int64_t DashPropertyTypeListMessage::player_id() const { return player_id_; }

void DashPropertyTypeListMessage::set_player_id(int64_t value_arg) {
  player_id_ = value_arg;
}

const EncodableList& DashPropertyTypeListMessage::type_list() const {
  return type_list_;
}

void DashPropertyTypeListMessage::set_type_list(
    const EncodableList& value_arg) {
  type_list_ = value_arg;
}

EncodableList DashPropertyTypeListMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(player_id_));
  list.push_back(EncodableValue(type_list_));
  return list;
}

DashPropertyTypeListMessage DashPropertyTypeListMessage::FromEncodableList(
    const EncodableList& list) {
  DashPropertyTypeListMessage decoded(std::get<int64_t>(list[0]),
                                      std::get<EncodableList>(list[1]));
  return decoded;
}

// DashPropertyMapMessage

DashPropertyMapMessage::DashPropertyMapMessage(int64_t player_id,
                                               const EncodableMap& map_data)
    : player_id_(player_id), map_data_(map_data) {}

int64_t DashPropertyMapMessage::player_id() const { return player_id_; }

void DashPropertyMapMessage::set_player_id(int64_t value_arg) {
  player_id_ = value_arg;
}

const EncodableMap& DashPropertyMapMessage::map_data() const {
  return map_data_;
}

void DashPropertyMapMessage::set_map_data(const EncodableMap& value_arg) {
  map_data_ = value_arg;
}

EncodableList DashPropertyMapMessage::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(player_id_));
  list.push_back(EncodableValue(map_data_));
  return list;
}

DashPropertyMapMessage DashPropertyMapMessage::FromEncodableList(
    const EncodableList& list) {
  DashPropertyMapMessage decoded(std::get<int64_t>(list[0]),
                                 std::get<EncodableMap>(list[1]));
  return decoded;
}

PigeonInternalCodecSerializer::PigeonInternalCodecSerializer() {}

EncodableValue PigeonInternalCodecSerializer::ReadValueOfType(
    uint8_t type, flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 129: {
      return CustomEncodableValue(PlayerMessage::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    }
    case 130: {
      return CustomEncodableValue(LoopingMessage::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    }
    case 131: {
      return CustomEncodableValue(VolumeMessage::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    }
    case 132: {
      return CustomEncodableValue(PlaybackSpeedMessage::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    }
    case 133: {
      return CustomEncodableValue(TrackMessage::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    }
    case 134: {
      return CustomEncodableValue(TrackTypeMessage::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    }
    case 135: {
      return CustomEncodableValue(SelectedTracksMessage::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    }
    case 136: {
      return CustomEncodableValue(PositionMessage::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    }
    case 137: {
      return CustomEncodableValue(CreateMessage::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    }
    case 138: {
      return CustomEncodableValue(MixWithOthersMessage::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    }
    case 139: {
      return CustomEncodableValue(GeometryMessage::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    }
    case 140: {
      return CustomEncodableValue(DurationMessage::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    }
    case 141: {
      return CustomEncodableValue(
          StreamingPropertyTypeMessage::FromEncodableList(
              std::get<EncodableList>(ReadValue(stream))));
    }
    case 142: {
      return CustomEncodableValue(StreamingPropertyMessage::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    }
    case 143: {
      return CustomEncodableValue(BufferConfigMessage::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    }
    case 144: {
      return CustomEncodableValue(RotationMessage::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    }
    case 145: {
      return CustomEncodableValue(DisplayModeMessage::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    }
    case 146: {
      return CustomEncodableValue(
          DashPropertyTypeListMessage::FromEncodableList(
              std::get<EncodableList>(ReadValue(stream))));
    }
    case 147: {
      return CustomEncodableValue(DashPropertyMapMessage::FromEncodableList(
          std::get<EncodableList>(ReadValue(stream))));
    }
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
  }
}

void PigeonInternalCodecSerializer::WriteValue(
    const EncodableValue& value, flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value =
          std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(PlayerMessage)) {
      stream->WriteByte(129);
      WriteValue(
          EncodableValue(
              std::any_cast<PlayerMessage>(*custom_value).ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(LoopingMessage)) {
      stream->WriteByte(130);
      WriteValue(
          EncodableValue(
              std::any_cast<LoopingMessage>(*custom_value).ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(VolumeMessage)) {
      stream->WriteByte(131);
      WriteValue(
          EncodableValue(
              std::any_cast<VolumeMessage>(*custom_value).ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(PlaybackSpeedMessage)) {
      stream->WriteByte(132);
      WriteValue(
          EncodableValue(std::any_cast<PlaybackSpeedMessage>(*custom_value)
                             .ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(TrackMessage)) {
      stream->WriteByte(133);
      WriteValue(
          EncodableValue(
              std::any_cast<TrackMessage>(*custom_value).ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(TrackTypeMessage)) {
      stream->WriteByte(134);
      WriteValue(
          EncodableValue(
              std::any_cast<TrackTypeMessage>(*custom_value).ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(SelectedTracksMessage)) {
      stream->WriteByte(135);
      WriteValue(
          EncodableValue(std::any_cast<SelectedTracksMessage>(*custom_value)
                             .ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(PositionMessage)) {
      stream->WriteByte(136);
      WriteValue(
          EncodableValue(
              std::any_cast<PositionMessage>(*custom_value).ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(CreateMessage)) {
      stream->WriteByte(137);
      WriteValue(
          EncodableValue(
              std::any_cast<CreateMessage>(*custom_value).ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(MixWithOthersMessage)) {
      stream->WriteByte(138);
      WriteValue(
          EncodableValue(std::any_cast<MixWithOthersMessage>(*custom_value)
                             .ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(GeometryMessage)) {
      stream->WriteByte(139);
      WriteValue(
          EncodableValue(
              std::any_cast<GeometryMessage>(*custom_value).ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(DurationMessage)) {
      stream->WriteByte(140);
      WriteValue(
          EncodableValue(
              std::any_cast<DurationMessage>(*custom_value).ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(StreamingPropertyTypeMessage)) {
      stream->WriteByte(141);
      WriteValue(EncodableValue(
                     std::any_cast<StreamingPropertyTypeMessage>(*custom_value)
                         .ToEncodableList()),
                 stream);
      return;
    }
    if (custom_value->type() == typeid(StreamingPropertyMessage)) {
      stream->WriteByte(142);
      WriteValue(
          EncodableValue(std::any_cast<StreamingPropertyMessage>(*custom_value)
                             .ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(BufferConfigMessage)) {
      stream->WriteByte(143);
      WriteValue(
          EncodableValue(std::any_cast<BufferConfigMessage>(*custom_value)
                             .ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(RotationMessage)) {
      stream->WriteByte(144);
      WriteValue(
          EncodableValue(
              std::any_cast<RotationMessage>(*custom_value).ToEncodableList()),
          stream);
      return;
    }
    if (custom_value->type() == typeid(DisplayModeMessage)) {
      stream->WriteByte(145);
      WriteValue(EncodableValue(std::any_cast<DisplayModeMessage>(*custom_value)
                                    .ToEncodableList()),
                 stream);
      return;
    }
    if (custom_value->type() == typeid(DashPropertyTypeListMessage)) {
      stream->WriteByte(146);
      WriteValue(EncodableValue(
                     std::any_cast<DashPropertyTypeListMessage>(*custom_value)
                         .ToEncodableList()),
                 stream);
      return;
    }
    if (custom_value->type() == typeid(DashPropertyMapMessage)) {
      stream->WriteByte(147);
      WriteValue(
          EncodableValue(std::any_cast<DashPropertyMapMessage>(*custom_value)
                             .ToEncodableList()),
          stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by VideoPlayerAvplayApi.
const flutter::StandardMessageCodec& VideoPlayerAvplayApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(
      &PigeonInternalCodecSerializer::GetInstance());
}

// Sets up an instance of `VideoPlayerAvplayApi` to handle messages through the
// `binary_messenger`.
void VideoPlayerAvplayApi::SetUp(flutter::BinaryMessenger* binary_messenger,
                                 VideoPlayerAvplayApi* api) {
  VideoPlayerAvplayApi::SetUp(binary_messenger, api, "");
}

void VideoPlayerAvplayApi::SetUp(flutter::BinaryMessenger* binary_messenger,
                                 VideoPlayerAvplayApi* api,
                                 const std::string& message_channel_suffix) {
  const std::string prepended_suffix =
      message_channel_suffix.length() > 0
          ? std::string(".") + message_channel_suffix
          : "";
  {
    BasicMessageChannel<> channel(binary_messenger,
                                  "dev.flutter.pigeon.video_player_avplay."
                                  "VideoPlayerAvplayApi.initialize" +
                                      prepended_suffix,
                                  &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              std::optional<FlutterError> output = api->Initialize();
              if (output.has_value()) {
                reply(WrapError(output.value()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(EncodableValue());
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(
        binary_messenger,
        "dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.create" +
            prepended_suffix,
        &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const CreateMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              ErrorOr<PlayerMessage> output = api->Create(msg_arg);
              if (output.has_error()) {
                reply(WrapError(output.error()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(
                  CustomEncodableValue(std::move(output).TakeValue()));
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(
        binary_messenger,
        "dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.dispose" +
            prepended_suffix,
        &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const PlayerMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              std::optional<FlutterError> output = api->Dispose(msg_arg);
              if (output.has_value()) {
                reply(WrapError(output.value()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(EncodableValue());
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger,
                                  "dev.flutter.pigeon.video_player_avplay."
                                  "VideoPlayerAvplayApi.setLooping" +
                                      prepended_suffix,
                                  &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const LoopingMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              std::optional<FlutterError> output = api->SetLooping(msg_arg);
              if (output.has_value()) {
                reply(WrapError(output.value()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(EncodableValue());
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger,
                                  "dev.flutter.pigeon.video_player_avplay."
                                  "VideoPlayerAvplayApi.setVolume" +
                                      prepended_suffix,
                                  &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const VolumeMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              std::optional<FlutterError> output = api->SetVolume(msg_arg);
              if (output.has_value()) {
                reply(WrapError(output.value()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(EncodableValue());
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger,
                                  "dev.flutter.pigeon.video_player_avplay."
                                  "VideoPlayerAvplayApi.setPlaybackSpeed" +
                                      prepended_suffix,
                                  &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const PlaybackSpeedMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              std::optional<FlutterError> output =
                  api->SetPlaybackSpeed(msg_arg);
              if (output.has_value()) {
                reply(WrapError(output.value()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(EncodableValue());
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(
        binary_messenger,
        "dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.play" +
            prepended_suffix,
        &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const PlayerMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              std::optional<FlutterError> output = api->Play(msg_arg);
              if (output.has_value()) {
                reply(WrapError(output.value()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(EncodableValue());
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger,
                                  "dev.flutter.pigeon.video_player_avplay."
                                  "VideoPlayerAvplayApi.setDeactivate" +
                                      prepended_suffix,
                                  &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const PlayerMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              ErrorOr<bool> output = api->SetDeactivate(msg_arg);
              if (output.has_error()) {
                reply(WrapError(output.error()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger,
                                  "dev.flutter.pigeon.video_player_avplay."
                                  "VideoPlayerAvplayApi.setActivate" +
                                      prepended_suffix,
                                  &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const PlayerMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              ErrorOr<bool> output = api->SetActivate(msg_arg);
              if (output.has_error()) {
                reply(WrapError(output.error()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(
        binary_messenger,
        "dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.track" +
            prepended_suffix,
        &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const TrackTypeMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              ErrorOr<TrackMessage> output = api->Track(msg_arg);
              if (output.has_error()) {
                reply(WrapError(output.error()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(
                  CustomEncodableValue(std::move(output).TakeValue()));
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger,
                                  "dev.flutter.pigeon.video_player_avplay."
                                  "VideoPlayerAvplayApi.setTrackSelection" +
                                      prepended_suffix,
                                  &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const SelectedTracksMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              ErrorOr<bool> output = api->SetTrackSelection(msg_arg);
              if (output.has_error()) {
                reply(WrapError(output.error()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(
        binary_messenger,
        "dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.position" +
            prepended_suffix,
        &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const PlayerMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              ErrorOr<PositionMessage> output = api->Position(msg_arg);
              if (output.has_error()) {
                reply(WrapError(output.error()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(
                  CustomEncodableValue(std::move(output).TakeValue()));
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(
        binary_messenger,
        "dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.duration" +
            prepended_suffix,
        &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const PlayerMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              ErrorOr<DurationMessage> output = api->Duration(msg_arg);
              if (output.has_error()) {
                reply(WrapError(output.error()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(
                  CustomEncodableValue(std::move(output).TakeValue()));
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(
        binary_messenger,
        "dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.seekTo" +
            prepended_suffix,
        &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const PositionMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              api->SeekTo(msg_arg,
                          [reply](std::optional<FlutterError>&& output) {
                            if (output.has_value()) {
                              reply(WrapError(output.value()));
                              return;
                            }
                            EncodableList wrapped;
                            wrapped.push_back(EncodableValue());
                            reply(EncodableValue(std::move(wrapped)));
                          });
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(
        binary_messenger,
        "dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.pause" +
            prepended_suffix,
        &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const PlayerMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              std::optional<FlutterError> output = api->Pause(msg_arg);
              if (output.has_value()) {
                reply(WrapError(output.value()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(EncodableValue());
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger,
                                  "dev.flutter.pigeon.video_player_avplay."
                                  "VideoPlayerAvplayApi.setMixWithOthers" +
                                      prepended_suffix,
                                  &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const MixWithOthersMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              std::optional<FlutterError> output =
                  api->SetMixWithOthers(msg_arg);
              if (output.has_value()) {
                reply(WrapError(output.value()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(EncodableValue());
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger,
                                  "dev.flutter.pigeon.video_player_avplay."
                                  "VideoPlayerAvplayApi.setDisplayGeometry" +
                                      prepended_suffix,
                                  &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const GeometryMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              std::optional<FlutterError> output =
                  api->SetDisplayGeometry(msg_arg);
              if (output.has_value()) {
                reply(WrapError(output.value()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(EncodableValue());
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger,
                                  "dev.flutter.pigeon.video_player_avplay."
                                  "VideoPlayerAvplayApi.getStreamingProperty" +
                                      prepended_suffix,
                                  &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg =
                  std::any_cast<const StreamingPropertyTypeMessage&>(
                      std::get<CustomEncodableValue>(encodable_msg_arg));
              ErrorOr<std::string> output = api->GetStreamingProperty(msg_arg);
              if (output.has_error()) {
                reply(WrapError(output.error()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger,
                                  "dev.flutter.pigeon.video_player_avplay."
                                  "VideoPlayerAvplayApi.setBufferConfig" +
                                      prepended_suffix,
                                  &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const BufferConfigMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              ErrorOr<bool> output = api->SetBufferConfig(msg_arg);
              if (output.has_error()) {
                reply(WrapError(output.error()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger,
                                  "dev.flutter.pigeon.video_player_avplay."
                                  "VideoPlayerAvplayApi.setStreamingProperty" +
                                      prepended_suffix,
                                  &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg =
                  std::any_cast<const StreamingPropertyMessage&>(
                      std::get<CustomEncodableValue>(encodable_msg_arg));
              std::optional<FlutterError> output =
                  api->SetStreamingProperty(msg_arg);
              if (output.has_value()) {
                reply(WrapError(output.value()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(EncodableValue());
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger,
                                  "dev.flutter.pigeon.video_player_avplay."
                                  "VideoPlayerAvplayApi.setDisplayRotate" +
                                      prepended_suffix,
                                  &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const RotationMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              ErrorOr<bool> output = api->SetDisplayRotate(msg_arg);
              if (output.has_error()) {
                reply(WrapError(output.error()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(binary_messenger,
                                  "dev.flutter.pigeon.video_player_avplay."
                                  "VideoPlayerAvplayApi.setDisplayMode" +
                                      prepended_suffix,
                                  &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg = std::any_cast<const DisplayModeMessage&>(
                  std::get<CustomEncodableValue>(encodable_msg_arg));
              ErrorOr<bool> output = api->SetDisplayMode(msg_arg);
              if (output.has_error()) {
                reply(WrapError(output.error()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(
        binary_messenger,
        "dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.setData" +
            prepended_suffix,
        &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg =
                  std::any_cast<const DashPropertyMapMessage&>(
                      std::get<CustomEncodableValue>(encodable_msg_arg));
              ErrorOr<bool> output = api->SetData(msg_arg);
              if (output.has_error()) {
                reply(WrapError(output.error()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
  {
    BasicMessageChannel<> channel(
        binary_messenger,
        "dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.getData" +
            prepended_suffix,
        &GetCodec());
    if (api != nullptr) {
      channel.SetMessageHandler(
          [api](const EncodableValue& message,
                const flutter::MessageReply<EncodableValue>& reply) {
            try {
              const auto& args = std::get<EncodableList>(message);
              const auto& encodable_msg_arg = args.at(0);
              if (encodable_msg_arg.IsNull()) {
                reply(WrapError("msg_arg unexpectedly null."));
                return;
              }
              const auto& msg_arg =
                  std::any_cast<const DashPropertyTypeListMessage&>(
                      std::get<CustomEncodableValue>(encodable_msg_arg));
              ErrorOr<DashPropertyMapMessage> output = api->GetData(msg_arg);
              if (output.has_error()) {
                reply(WrapError(output.error()));
                return;
              }
              EncodableList wrapped;
              wrapped.push_back(
                  CustomEncodableValue(std::move(output).TakeValue()));
              reply(EncodableValue(std::move(wrapped)));
            } catch (const std::exception& exception) {
              reply(WrapError(exception.what()));
            }
          });
    } else {
      channel.SetMessageHandler(nullptr);
    }
  }
}

EncodableValue VideoPlayerAvplayApi::WrapError(std::string_view error_message) {
  return EncodableValue(
      EncodableList{EncodableValue(std::string(error_message)),
                    EncodableValue("Error"), EncodableValue()});
}

EncodableValue VideoPlayerAvplayApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{EncodableValue(error.code()),
                                      EncodableValue(error.message()),
                                      error.details()});
}
