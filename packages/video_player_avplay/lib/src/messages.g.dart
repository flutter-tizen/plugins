// Autogenerated from Pigeon (v22.7.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

class PlayerMessage {
  PlayerMessage({required this.playerId});

  int playerId;

  Object encode() {
    return <Object?>[playerId];
  }

  static PlayerMessage decode(Object result) {
    result as List<Object?>;
    return PlayerMessage(playerId: result[0]! as int);
  }
}

class LoopingMessage {
  LoopingMessage({required this.playerId, required this.isLooping});

  int playerId;

  bool isLooping;

  Object encode() {
    return <Object?>[playerId, isLooping];
  }

  static LoopingMessage decode(Object result) {
    result as List<Object?>;
    return LoopingMessage(
      playerId: result[0]! as int,
      isLooping: result[1]! as bool,
    );
  }
}

class VolumeMessage {
  VolumeMessage({required this.playerId, required this.volume});

  int playerId;

  double volume;

  Object encode() {
    return <Object?>[playerId, volume];
  }

  static VolumeMessage decode(Object result) {
    result as List<Object?>;
    return VolumeMessage(
      playerId: result[0]! as int,
      volume: result[1]! as double,
    );
  }
}

class PlaybackSpeedMessage {
  PlaybackSpeedMessage({required this.playerId, required this.speed});

  int playerId;

  double speed;

  Object encode() {
    return <Object?>[playerId, speed];
  }

  static PlaybackSpeedMessage decode(Object result) {
    result as List<Object?>;
    return PlaybackSpeedMessage(
      playerId: result[0]! as int,
      speed: result[1]! as double,
    );
  }
}

class TrackMessage {
  TrackMessage({required this.playerId, required this.tracks});

  int playerId;

  List<Map<Object?, Object?>?> tracks;

  Object encode() {
    return <Object?>[playerId, tracks];
  }

  static TrackMessage decode(Object result) {
    result as List<Object?>;
    return TrackMessage(
      playerId: result[0]! as int,
      tracks: (result[1] as List<Object?>?)!.cast<Map<Object?, Object?>?>(),
    );
  }
}

class TrackTypeMessage {
  TrackTypeMessage({required this.playerId, required this.trackType});

  int playerId;

  String trackType;

  Object encode() {
    return <Object?>[playerId, trackType];
  }

  static TrackTypeMessage decode(Object result) {
    result as List<Object?>;
    return TrackTypeMessage(
      playerId: result[0]! as int,
      trackType: result[1]! as String,
    );
  }
}

class SelectedTracksMessage {
  SelectedTracksMessage({
    required this.playerId,
    required this.trackId,
    required this.trackType,
  });

  int playerId;

  int trackId;

  String trackType;

  Object encode() {
    return <Object?>[playerId, trackId, trackType];
  }

  static SelectedTracksMessage decode(Object result) {
    result as List<Object?>;
    return SelectedTracksMessage(
      playerId: result[0]! as int,
      trackId: result[1]! as int,
      trackType: result[2]! as String,
    );
  }
}

class PositionMessage {
  PositionMessage({required this.playerId, required this.position});

  int playerId;

  int position;

  Object encode() {
    return <Object?>[playerId, position];
  }

  static PositionMessage decode(Object result) {
    result as List<Object?>;
    return PositionMessage(
      playerId: result[0]! as int,
      position: result[1]! as int,
    );
  }
}

class CreateMessage {
  CreateMessage({
    this.asset,
    this.uri,
    this.packageName,
    this.formatHint,
    this.httpHeaders,
    this.drmConfigs,
    this.playerOptions,
    this.streamingProperty,
  });

  String? asset;

  String? uri;

  String? packageName;

  String? formatHint;

  Map<Object?, Object?>? httpHeaders;

  Map<Object?, Object?>? drmConfigs;

  Map<Object?, Object?>? playerOptions;

  Map<Object?, Object?>? streamingProperty;

  Object encode() {
    return <Object?>[
      asset,
      uri,
      packageName,
      formatHint,
      httpHeaders,
      drmConfigs,
      playerOptions,
      streamingProperty,
    ];
  }

  static CreateMessage decode(Object result) {
    result as List<Object?>;
    return CreateMessage(
      asset: result[0] as String?,
      uri: result[1] as String?,
      packageName: result[2] as String?,
      formatHint: result[3] as String?,
      httpHeaders:
          (result[4] as Map<Object?, Object?>?)?.cast<Object?, Object?>(),
      drmConfigs:
          (result[5] as Map<Object?, Object?>?)?.cast<Object?, Object?>(),
      playerOptions:
          (result[6] as Map<Object?, Object?>?)?.cast<Object?, Object?>(),
      streamingProperty:
          (result[7] as Map<Object?, Object?>?)?.cast<Object?, Object?>(),
    );
  }
}

class MixWithOthersMessage {
  MixWithOthersMessage({required this.mixWithOthers});

  bool mixWithOthers;

  Object encode() {
    return <Object?>[mixWithOthers];
  }

  static MixWithOthersMessage decode(Object result) {
    result as List<Object?>;
    return MixWithOthersMessage(mixWithOthers: result[0]! as bool);
  }
}

class GeometryMessage {
  GeometryMessage({
    required this.playerId,
    required this.x,
    required this.y,
    required this.width,
    required this.height,
  });

  int playerId;

  int x;

  int y;

  int width;

  int height;

  Object encode() {
    return <Object?>[playerId, x, y, width, height];
  }

  static GeometryMessage decode(Object result) {
    result as List<Object?>;
    return GeometryMessage(
      playerId: result[0]! as int,
      x: result[1]! as int,
      y: result[2]! as int,
      width: result[3]! as int,
      height: result[4]! as int,
    );
  }
}

class DurationMessage {
  DurationMessage({required this.playerId, this.durationRange});

  int playerId;

  List<int?>? durationRange;

  Object encode() {
    return <Object?>[playerId, durationRange];
  }

  static DurationMessage decode(Object result) {
    result as List<Object?>;
    return DurationMessage(
      playerId: result[0]! as int,
      durationRange: (result[1] as List<Object?>?)?.cast<int?>(),
    );
  }
}

class StreamingPropertyTypeMessage {
  StreamingPropertyTypeMessage({
    required this.playerId,
    required this.streamingPropertyType,
  });

  int playerId;

  String streamingPropertyType;

  Object encode() {
    return <Object?>[playerId, streamingPropertyType];
  }

  static StreamingPropertyTypeMessage decode(Object result) {
    result as List<Object?>;
    return StreamingPropertyTypeMessage(
      playerId: result[0]! as int,
      streamingPropertyType: result[1]! as String,
    );
  }
}

class StreamingPropertyMessage {
  StreamingPropertyMessage({
    required this.playerId,
    required this.streamingPropertyType,
    required this.streamingPropertyValue,
  });

  int playerId;

  String streamingPropertyType;

  String streamingPropertyValue;

  Object encode() {
    return <Object?>[playerId, streamingPropertyType, streamingPropertyValue];
  }

  static StreamingPropertyMessage decode(Object result) {
    result as List<Object?>;
    return StreamingPropertyMessage(
      playerId: result[0]! as int,
      streamingPropertyType: result[1]! as String,
      streamingPropertyValue: result[2]! as String,
    );
  }
}

class BufferConfigMessage {
  BufferConfigMessage({
    required this.playerId,
    required this.bufferConfigType,
    required this.bufferConfigValue,
  });

  int playerId;

  String bufferConfigType;

  int bufferConfigValue;

  Object encode() {
    return <Object?>[playerId, bufferConfigType, bufferConfigValue];
  }

  static BufferConfigMessage decode(Object result) {
    result as List<Object?>;
    return BufferConfigMessage(
      playerId: result[0]! as int,
      bufferConfigType: result[1]! as String,
      bufferConfigValue: result[2]! as int,
    );
  }
}

class RotationMessage {
  RotationMessage({required this.playerId, required this.rotation});

  int playerId;

  int rotation;

  Object encode() {
    return <Object?>[playerId, rotation];
  }

  static RotationMessage decode(Object result) {
    result as List<Object?>;
    return RotationMessage(
      playerId: result[0]! as int,
      rotation: result[1]! as int,
    );
  }
}

class DisplayModeMessage {
  DisplayModeMessage({required this.playerId, required this.displayMode});

  int playerId;

  int displayMode;

  Object encode() {
    return <Object?>[playerId, displayMode];
  }

  static DisplayModeMessage decode(Object result) {
    result as List<Object?>;
    return DisplayModeMessage(
      playerId: result[0]! as int,
      displayMode: result[1]! as int,
    );
  }
}

class DashPropertyTypeListMessage {
  DashPropertyTypeListMessage({required this.playerId, required this.typeList});

  int playerId;

  List<String?> typeList;

  Object encode() {
    return <Object?>[playerId, typeList];
  }

  static DashPropertyTypeListMessage decode(Object result) {
    result as List<Object?>;
    return DashPropertyTypeListMessage(
      playerId: result[0]! as int,
      typeList: (result[1] as List<Object?>?)!.cast<String?>(),
    );
  }
}

class DashPropertyMapMessage {
  DashPropertyMapMessage({required this.playerId, required this.mapData});

  int playerId;

  Map<Object?, Object?> mapData;

  Object encode() {
    return <Object?>[playerId, mapData];
  }

  static DashPropertyMapMessage decode(Object result) {
    result as List<Object?>;
    return DashPropertyMapMessage(
      playerId: result[0]! as int,
      mapData: (result[1] as Map<Object?, Object?>?)!.cast<Object?, Object?>(),
    );
  }
}

class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else if (value is PlayerMessage) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is LoopingMessage) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is VolumeMessage) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is PlaybackSpeedMessage) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is TrackMessage) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is TrackTypeMessage) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is SelectedTracksMessage) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is PositionMessage) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is CreateMessage) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is MixWithOthersMessage) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is GeometryMessage) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is DurationMessage) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else if (value is StreamingPropertyTypeMessage) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else if (value is StreamingPropertyMessage) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else if (value is BufferConfigMessage) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else if (value is RotationMessage) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    } else if (value is DisplayModeMessage) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    } else if (value is DashPropertyTypeListMessage) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    } else if (value is DashPropertyMapMessage) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        return PlayerMessage.decode(readValue(buffer)!);
      case 130:
        return LoopingMessage.decode(readValue(buffer)!);
      case 131:
        return VolumeMessage.decode(readValue(buffer)!);
      case 132:
        return PlaybackSpeedMessage.decode(readValue(buffer)!);
      case 133:
        return TrackMessage.decode(readValue(buffer)!);
      case 134:
        return TrackTypeMessage.decode(readValue(buffer)!);
      case 135:
        return SelectedTracksMessage.decode(readValue(buffer)!);
      case 136:
        return PositionMessage.decode(readValue(buffer)!);
      case 137:
        return CreateMessage.decode(readValue(buffer)!);
      case 138:
        return MixWithOthersMessage.decode(readValue(buffer)!);
      case 139:
        return GeometryMessage.decode(readValue(buffer)!);
      case 140:
        return DurationMessage.decode(readValue(buffer)!);
      case 141:
        return StreamingPropertyTypeMessage.decode(readValue(buffer)!);
      case 142:
        return StreamingPropertyMessage.decode(readValue(buffer)!);
      case 143:
        return BufferConfigMessage.decode(readValue(buffer)!);
      case 144:
        return RotationMessage.decode(readValue(buffer)!);
      case 145:
        return DisplayModeMessage.decode(readValue(buffer)!);
      case 146:
        return DashPropertyTypeListMessage.decode(readValue(buffer)!);
      case 147:
        return DashPropertyMapMessage.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class VideoPlayerAvplayApi {
  /// Constructor for [VideoPlayerAvplayApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  VideoPlayerAvplayApi({
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) : pigeonVar_binaryMessenger = binaryMessenger,
       pigeonVar_messageChannelSuffix =
           messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> initialize() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.initialize$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PlayerMessage> create(CreateMessage msg) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.create$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[msg]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as PlayerMessage?)!;
    }
  }

  Future<void> dispose(PlayerMessage msg) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.dispose$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[msg]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setLooping(LoopingMessage msg) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.setLooping$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[msg]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setVolume(VolumeMessage msg) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.setVolume$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[msg]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setPlaybackSpeed(PlaybackSpeedMessage msg) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.setPlaybackSpeed$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[msg]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> play(PlayerMessage msg) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.play$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[msg]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> setDeactivate(PlayerMessage msg) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.setDeactivate$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[msg]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> setActivate(PlayerMessage msg) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.setActivate$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[msg]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<TrackMessage> track(TrackTypeMessage msg) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.track$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[msg]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as TrackMessage?)!;
    }
  }

  Future<bool> setTrackSelection(SelectedTracksMessage msg) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.setTrackSelection$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[msg]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<PositionMessage> position(PlayerMessage msg) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.position$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[msg]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as PositionMessage?)!;
    }
  }

  Future<DurationMessage> duration(PlayerMessage msg) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.duration$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[msg]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as DurationMessage?)!;
    }
  }

  Future<void> seekTo(PositionMessage msg) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.seekTo$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[msg]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> pause(PlayerMessage msg) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.pause$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[msg]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setMixWithOthers(MixWithOthersMessage msg) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.setMixWithOthers$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[msg]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setDisplayGeometry(GeometryMessage msg) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.setDisplayGeometry$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[msg]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<String> getStreamingProperty(StreamingPropertyTypeMessage msg) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.getStreamingProperty$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[msg]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  Future<bool> setBufferConfig(BufferConfigMessage msg) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.setBufferConfig$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[msg]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> setStreamingProperty(StreamingPropertyMessage msg) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.setStreamingProperty$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[msg]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> setDisplayRotate(RotationMessage msg) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.setDisplayRotate$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[msg]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> setDisplayMode(DisplayModeMessage msg) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.setDisplayMode$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[msg]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> setData(DashPropertyMapMessage msg) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.setData$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[msg]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<DashPropertyMapMessage> getData(
    DashPropertyTypeListMessage msg,
  ) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.video_player_avplay.VideoPlayerAvplayApi.getData$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
          pigeonVar_channelName,
          pigeonChannelCodec,
          binaryMessenger: pigeonVar_binaryMessenger,
        );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[msg]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as DashPropertyMapMessage?)!;
    }
  }
}
