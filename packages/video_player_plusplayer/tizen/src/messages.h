// Copyright 2022 Samsung Electronics Co., Ltd. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v3.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#ifndef PIGEON_MESSAGES_H_
#define PIGEON_MESSAGES_H_
#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

/* Generated class from Pigeon. */

class FlutterError {
 public:
  FlutterError();
  FlutterError(const std::string& arg_code) : code(arg_code){};
  FlutterError(const std::string& arg_code, const std::string& arg_message)
      : code(arg_code), message(arg_message){};
  FlutterError(const std::string& arg_code, const std::string& arg_message,
               const flutter::EncodableValue& arg_details)
      : code(arg_code), message(arg_message), details(arg_details){};
  std::string code;
  std::string message;
  flutter::EncodableValue details;
};
template <class T>
class ErrorOr {
  std::variant<std::unique_ptr<T>, T, FlutterError> v;

 public:
  ErrorOr(const T& rhs) { new (&v) T(rhs); }
  ErrorOr(const FlutterError& rhs) { new (&v) FlutterError(rhs); }
  static ErrorOr<std::unique_ptr<T>> MakeWithUniquePtr(std::unique_ptr<T> rhs) {
    ErrorOr<std::unique_ptr<T>> ret = ErrorOr<std::unique_ptr<T>>();
    ret.v = std::move(rhs);
    return ret;
  }
  bool hasError() const { return std::holds_alternative<FlutterError>(v); }
  const T& value() const { return std::get<T>(v); };
  const FlutterError& error() const { return std::get<FlutterError>(v); };

 private:
  ErrorOr() = default;
  template <typename U>
  friend class ErrorOr;
};

/* Generated class from Pigeon that represents data sent in messages. */
class TextureMessage {
 public:
  TextureMessage();
  int64_t texture_id() const;
  void set_texture_id(int64_t value_arg);

 private:
  TextureMessage(flutter::EncodableMap map);
  flutter::EncodableMap ToEncodableMap() const;
  friend class VideoPlayerApi;
  friend class VideoPlayerApiCodecSerializer;
  int64_t texture_id_;
};

/* Generated class from Pigeon that represents data sent in messages. */
class LoopingMessage {
 public:
  LoopingMessage();
  int64_t texture_id() const;
  void set_texture_id(int64_t value_arg);

  bool is_looping() const;
  void set_is_looping(bool value_arg);

 private:
  LoopingMessage(flutter::EncodableMap map);
  flutter::EncodableMap ToEncodableMap() const;
  friend class VideoPlayerApi;
  friend class VideoPlayerApiCodecSerializer;
  int64_t texture_id_;
  bool is_looping_;
};

/* Generated class from Pigeon that represents data sent in messages. */
class VolumeMessage {
 public:
  VolumeMessage();
  int64_t texture_id() const;
  void set_texture_id(int64_t value_arg);

  double volume() const;
  void set_volume(double value_arg);

 private:
  VolumeMessage(flutter::EncodableMap map);
  flutter::EncodableMap ToEncodableMap() const;
  friend class VideoPlayerApi;
  friend class VideoPlayerApiCodecSerializer;
  int64_t texture_id_;
  double volume_;
};

/* Generated class from Pigeon that represents data sent in messages. */
class PlaybackSpeedMessage {
 public:
  PlaybackSpeedMessage();
  int64_t texture_id() const;
  void set_texture_id(int64_t value_arg);

  double speed() const;
  void set_speed(double value_arg);

 private:
  PlaybackSpeedMessage(flutter::EncodableMap map);
  flutter::EncodableMap ToEncodableMap() const;
  friend class VideoPlayerApi;
  friend class VideoPlayerApiCodecSerializer;
  int64_t texture_id_;
  double speed_;
};

/* Generated class from Pigeon that represents data sent in messages. */
class PositionMessage {
 public:
  PositionMessage();
  int64_t texture_id() const;
  void set_texture_id(int64_t value_arg);

  int64_t position() const;
  void set_position(int64_t value_arg);

 private:
  PositionMessage(flutter::EncodableMap map);
  flutter::EncodableMap ToEncodableMap() const;
  friend class VideoPlayerApi;
  friend class VideoPlayerApiCodecSerializer;
  int64_t texture_id_;
  int64_t position_;
};

/* Generated class from Pigeon that represents data sent in messages. */
class CreateMessage {
 public:
  CreateMessage();
  const std::string* asset() const;
  void set_asset(const std::string_view* value_arg);
  void set_asset(std::string_view value_arg);

  const std::string* uri() const;
  void set_uri(const std::string_view* value_arg);
  void set_uri(std::string_view value_arg);

  const std::string* package_name() const;
  void set_package_name(const std::string_view* value_arg);
  void set_package_name(std::string_view value_arg);

  const std::string* format_hint() const;
  void set_format_hint(const std::string_view* value_arg);
  void set_format_hint(std::string_view value_arg);

  const flutter::EncodableMap* http_headers() const;
  void set_http_headers(const flutter::EncodableMap* value_arg);
  void set_http_headers(const flutter::EncodableMap& value_arg);

  const flutter::EncodableMap* drm_configs() const;
  void set_drm_configs(const flutter::EncodableMap* value_arg);
  void set_drm_configs(const flutter::EncodableMap& value_arg);

 private:
  CreateMessage(flutter::EncodableMap map);
  flutter::EncodableMap ToEncodableMap() const;
  friend class VideoPlayerApi;
  friend class VideoPlayerApiCodecSerializer;
  std::optional<std::string> asset_;
  std::optional<std::string> uri_;
  std::optional<std::string> package_name_;
  std::optional<std::string> format_hint_;
  std::optional<flutter::EncodableMap> http_headers_;
  std::optional<flutter::EncodableMap> drm_configs_;
};

/* Generated class from Pigeon that represents data sent in messages. */
class MixWithOthersMessage {
 public:
  MixWithOthersMessage();
  bool mix_with_others() const;
  void set_mix_with_others(bool value_arg);

 private:
  MixWithOthersMessage(flutter::EncodableMap map);
  flutter::EncodableMap ToEncodableMap() const;
  friend class VideoPlayerApi;
  friend class VideoPlayerApiCodecSerializer;
  bool mix_with_others_;
};

/* Generated class from Pigeon that represents data sent in messages. */
class GeometryMessage {
 public:
  GeometryMessage();
  int64_t texture_id() const;
  void set_texture_id(int64_t value_arg);

  int64_t x() const;
  void set_x(int64_t value_arg);

  int64_t y() const;
  void set_y(int64_t value_arg);

  int64_t w() const;
  void set_w(int64_t value_arg);

  int64_t h() const;
  void set_h(int64_t value_arg);

 private:
  GeometryMessage(flutter::EncodableMap map);
  flutter::EncodableMap ToEncodableMap() const;
  friend class VideoPlayerApi;
  friend class VideoPlayerApiCodecSerializer;
  int64_t texture_id_;
  int64_t x_;
  int64_t y_;
  int64_t w_;
  int64_t h_;
};

/* Generated class from Pigeon that represents data sent in messages. */
class BufferingConfigMessage {
 public:
  BufferingConfigMessage();
  int64_t texture_id() const;
  void set_texture_id(int64_t value_arg);

  const std::string& buffer_option() const;
  void set_buffer_option(std::string_view value_arg);

  int64_t amount() const;
  void set_amount(int64_t value_arg);

 private:
  BufferingConfigMessage(flutter::EncodableMap map);
  flutter::EncodableMap ToEncodableMap() const;
  friend class VideoPlayerApi;
  friend class VideoPlayerApiCodecSerializer;
  int64_t texture_id_;
  std::string buffer_option_;
  int64_t amount_;
};

class VideoPlayerApiCodecSerializer : public flutter::StandardCodecSerializer {
 public:
  inline static VideoPlayerApiCodecSerializer& GetInstance() {
    static VideoPlayerApiCodecSerializer sInstance;
    return sInstance;
  }

  VideoPlayerApiCodecSerializer();

 public:
  void WriteValue(const flutter::EncodableValue& value,
                  flutter::ByteStreamWriter* stream) const override;

 protected:
  flutter::EncodableValue ReadValueOfType(
      uint8_t type, flutter::ByteStreamReader* stream) const override;
};

/* Generated class from Pigeon that represents a handler of messages from
 * Flutter. */
class VideoPlayerApi {
 public:
  VideoPlayerApi(const VideoPlayerApi&) = delete;
  VideoPlayerApi& operator=(const VideoPlayerApi&) = delete;
  virtual ~VideoPlayerApi(){};
  virtual std::optional<FlutterError> Initialize() = 0;
  virtual ErrorOr<std::unique_ptr<TextureMessage>> Create(
      const CreateMessage& msg) = 0;
  virtual std::optional<FlutterError> Dispose(const TextureMessage& msg) = 0;
  virtual std::optional<FlutterError> SetLooping(const LoopingMessage& msg) = 0;
  virtual std::optional<FlutterError> SetVolume(const VolumeMessage& msg) = 0;
  virtual std::optional<FlutterError> SetPlaybackSpeed(
      const PlaybackSpeedMessage& msg) = 0;
  virtual std::optional<FlutterError> Play(const TextureMessage& msg) = 0;
  virtual ErrorOr<std::unique_ptr<PositionMessage>> Position(
      const TextureMessage& msg) = 0;
  virtual std::optional<FlutterError> SeekTo(const PositionMessage& msg) = 0;
  virtual std::optional<FlutterError> Pause(const TextureMessage& msg) = 0;
  virtual std::optional<FlutterError> SetMixWithOthers(
      const MixWithOthersMessage& msg) = 0;
  virtual std::optional<FlutterError> SetDisplayRoi(
      const GeometryMessage& arg) = 0;
  virtual ErrorOr<bool> SetBufferingConfig(
      const BufferingConfigMessage& arg) = 0;

  /** The codec used by VideoPlayerApi. */
  static const flutter::StandardMessageCodec& GetCodec();
  /** Sets up an instance of `VideoPlayerApi` to handle messages through the
   * `binary_messenger`. */
  static void SetUp(flutter::BinaryMessenger* binary_messenger,
                    VideoPlayerApi* api);
  static flutter::EncodableMap WrapError(std::string_view error_message);
  static flutter::EncodableMap WrapError(const FlutterError& error);

 protected:
  VideoPlayerApi() = default;
};
#endif  // PIGEON_MESSAGES_H_
